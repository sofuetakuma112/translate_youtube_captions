WEBVTT

00:00:01.599 --> 00:00:17.160
Hi there and welcome to a project video where you'll build and deploy a full stack chat application with authentication and Twilio Sms notifications with direct and group chats, emojis, and reactions.

00:00:17.760 --> 00:00:24.480
Built-in gif support the ability to edit and delete messages, specialized commands, and much more.

00:00:25.026 --> 00:00:31.679
This fully responsive medical pager is the best chat application that you can currently find on Youtube.

00:00:32.160 --> 00:00:38.826
In this video, you'll work with modern technologies such as Javascript, Node, React, and Stream.

00:00:39.680 --> 00:00:54.388
You'll learn advanced React best practices such as folder and file structure, custom hooks, and even React context api creating the user interface for the login and register page and for the entire chat feed.

00:00:54.810 --> 00:00:58.028
You'll also learn how to work with Stream api.

00:00:58.419 --> 00:01:08.000
Stream is the number one chat messaging platform that allows you to build scalable and completely custom chat applications using their apis.

00:01:08.719 --> 00:01:14.919
We're also going to use Twilio to send a real Sms notification to a user when he's offline.

00:01:15.680 --> 00:01:22.319
The chat app we'll be building is not a general purpose chat, it is a medical pager themed chat application.

00:01:22.799 --> 00:01:33.653
After watching this video, you'll be able to build any chat application you can think of, from clones of popular apps like Whatsapp, Discord, and Slack to the fully custom messaging platforms.

00:01:34.400 --> 00:01:42.586
I initially planned on putting this as a paid course, but I later decided to release it completely free for you guys here on Youtube.

00:01:43.040 --> 00:01:46.426
So to support this video, leave a like comment and subscribe.

00:01:46.800 --> 00:01:50.679
It shouldn't take more than a few seconds and I really appreciate it.

00:01:51.438 --> 00:01:59.359
In the end, we're also going to deploy the application so that you can share it with your friends, put it on your portfolio, and get a job.

00:01:59.920 --> 00:02:01.992
Let's get straight into it.

00:02:09.840 --> 00:02:14.490
Before we begin, please allow me to give you a quick demo of the application.

00:02:14.878 --> 00:02:19.645
As I've mentioned, the chat app we'll be building is not a general purpose chat.

00:02:20.080 --> 00:02:22.080
It's a medical pager themed chat application.

00:02:22.533 --> 00:02:32.452
It's an app where doctors and medical personnel can communicate to ensure that they're always up to date with what's happening in their divisions of the hospital.

00:02:32.959 --> 00:02:37.180
of course, this is just one example of how Versatile Stream is.

00:02:37.759 --> 00:02:48.159
You can build anything you'd like clones of popular applications like Discord or Slack, a coding community chat, custom direct messaging app, or anything you can think of.

00:02:48.800 --> 00:02:54.560
This application consists of two parts: a login and registration form, and a chat dashboard.

00:02:54.971 --> 00:02:57.440
So let's check out the login form.

00:02:58.479 --> 00:03:11.093
When a doctor or a person is signing up for the first time, they'll have to enter their full name, username, a phone number as well so that we can send Sms notifications, avatar url, and a password.

00:03:11.840 --> 00:03:15.759
Once they sign up for the first time, they'll be added to our database.

00:03:16.158 --> 00:03:18.409
Then they can simply sign in.

00:03:18.859 --> 00:03:19.759
For example, Dr.

00:03:20.720 --> 00:03:24.970
Miller, We enter the password and click sign in.

00:03:25.439 --> 00:03:28.959
As simple as that, we are right inside of our application.

00:03:29.759 --> 00:03:32.461
As you can see, it has plenty of features.

00:03:32.799 --> 00:03:38.358
There are a lot of chat tutorials on Youtube, but I've never seen this many features on a video.

00:03:38.878 --> 00:03:44.091
Of course we can send messages, but we can also add reactions to those messages.

00:03:44.560 --> 00:03:45.342
There we go.

00:03:45.733 --> 00:03:51.280
We can also reply in treads to a specific message, so let's say hello there.

00:03:52.318 --> 00:03:57.999
And like that we have built-in threads for replies as you can see right there.

00:03:58.318 --> 00:04:00.919
We can also send gifs that's something that's pretty new.

00:04:01.219 --> 00:04:12.840
so if you just type forward slash giphy and try to do something like hi, it's going to give you all the random gifs that you can send right inside of the chat.

00:04:13.344 --> 00:04:22.745
You can also send emojis images and you can also embed Youtube videos so that you can play them right from inside of your chat.

00:04:23.199 --> 00:04:32.279
We also have a search so you can search for different channels and users, But more importantly, the entire chat app is completely mobile.

00:04:32.799 --> 00:04:36.740
Responsive! As you can see, it has that native like feeling.

00:04:37.050 --> 00:04:46.319
It feels like it is a mobile application and if you click right here, you'll see a nice little animation that gives you access to all the channels and direct messages.

00:04:47.680 --> 00:04:56.226
Usually it would be extremely hard to add so many features to an application like this in one video, but thankfully we are using Stream.

00:04:56.720 --> 00:05:01.199
As I've mentioned, stream is the number one chat messaging api infrastructure.

00:05:01.759 --> 00:05:07.151
It allows you to build scalable and custom chat applications extremely easily.

00:05:07.775 --> 00:05:09.419
We can explore their demos.

00:05:09.759 --> 00:05:15.412
We have a social Messenger example, the team collaboration one which is similar to ours.

00:05:15.918 --> 00:05:19.680
Customer support even live stream chat applications are covered.

00:05:20.171 --> 00:05:32.479
and we also have virtual events if you want to chat while watching a specific stream, I think you can see how powerful stream is and stream is exactly what we'll be using in this video.

00:05:32.799 --> 00:05:36.746
With that said, I think you're pretty excited to start coding this application.

00:05:37.199 --> 00:05:40.419
So let's dive into coding right away.

00:05:41.038 --> 00:05:44.239
Let's start by creating an empty folder on our desktop.

00:05:44.479 --> 00:05:51.611
I'm going to call it Medical Dash pager of course, feel free to call it a chat application or anything else you'd like.

00:05:51.908 --> 00:05:59.662
Once we have our folder, I've also opened an empty Visual Studio code window of course, feel free to use any code editor of choice.

00:05:59.911 --> 00:06:07.226
In this case, we'll be sticking with Visual Studio code, so simply drag and drop the folder into your code editor.

00:06:07.839 --> 00:06:11.828
Now that you have done that, you can simply go under view and then terminal.

00:06:12.240 --> 00:06:15.759
We're going to use this terminal to initialize our React application.

00:06:16.399 --> 00:06:20.079
Let's clear it and now we have to create two different directories.

00:06:20.605 --> 00:06:23.233
So let's create a new folder.

00:06:23.759 --> 00:06:31.492
This one is going to be called client for our client-side React front-end application and the other one is going to be called Server.

00:06:31.776 --> 00:06:35.567
This is going to be for our backend node.js Server.

00:06:36.160 --> 00:06:39.120
In this case, we can start off with creating the client side.

00:06:39.440 --> 00:06:47.953
So let's Cd into client and then finally run Mpx Create Dash React Dash App Dot Slash.

00:06:48.639 --> 00:06:54.239
That slash is going to make sure to install our React application right inside of the client folder.

00:06:54.639 --> 00:06:56.079
Now let's click enter.

00:06:56.560 --> 00:06:59.680
We're gonna wait a few minutes and I'll be right back.

00:07:00.160 --> 00:07:00.822
There we go.

00:07:01.153 --> 00:07:02.478
Our application has been initialized.

00:07:02.901 --> 00:07:05.720
We can clear our terminal to start off.

00:07:06.000 --> 00:07:09.851
Let's go inside of our client folder and delete the source folder.

00:07:10.285 --> 00:07:18.185
Now, every React application needs to have an index.js where we need to import React from React.

00:07:19.038 --> 00:07:22.399
We also need to import React Dom from React Dom.

00:07:23.279 --> 00:07:29.645
Then we can import the app which we haven't yet created that's going to be import app from that slash App.

00:07:30.102 --> 00:07:42.839
And finally, we can say React Dom dot Render and we can render our application by specifying document.getelementbyid and that's going to be Root.

00:07:43.164 --> 00:07:48.026
Even though I'm sure that most of you understand what this does, let me quickly explain it.

00:07:48.439 --> 00:08:23.899
Our entire React application is going to be inside of this component and we're going to hook that component onto the root div and where that would div is is right inside of the public and then index.html This file might seem a bit weird, but if we properly condense it like this, remove some comments, some more comments, and even more comments and this you'll see that this is a simple index Html page with only one div and inside of here our entire React application will be while we're here.

00:08:24.170 --> 00:08:31.333
We can also change this from React app to something like Medical Pager or feel free to change it to whatever you'd like.

00:08:32.000 --> 00:08:41.110
Great! Now we can go back to our index or more specifically, we can start creating our app.jsx component inside of here.

00:08:41.465 --> 00:08:50.586
I'm going to use an Rafce, which is React arrow function with export, so this is simply going to create the entire boilerplate for the component.

00:08:51.039 --> 00:08:56.080
You can use that same command by installing Es7, React, Redux Craftql snippets.

00:08:56.413 --> 00:09:02.240
so if you install that extension, you'll have plenty of these snippets that you can call to make your work easier.

00:09:03.039 --> 00:09:07.360
With that said, we have nothing more than a simple functional component inside of there.

00:09:07.700 --> 00:09:13.805
For now, let's simply create an H1 and say Medical Pager Chat application.

00:09:14.251 --> 00:09:22.720
Great! Now we have our index, We have our app.js and the last thing we need is to install all of the necessary dependencies.

00:09:23.679 --> 00:09:27.065
There are only three most important dependencies that we're gonna need.

00:09:27.452 --> 00:09:40.571
so you can say Npm Install and these are gonna be Stream Dash Chat Also, Stream Dash Chat Dash, React, and finally Universal Dash Cookie.

00:09:40.902 --> 00:09:45.990
We're gonna use cookies to save the user information in the browser if you press enter.

00:09:46.279 --> 00:09:48.680
This is going to install these three dependencies.

00:09:49.093 --> 00:09:56.297
Not a lot, only three, but these are going to help us to create our entire chat application while this is installing.

00:09:56.582 --> 00:10:03.222
I wanted to quickly show you that we have the entire code for this project under Project Medical Pager on Github.

00:10:03.577 --> 00:10:09.879
The link is going to be down in the description if you ever get stuck or something is not working as it should.

00:10:10.213 --> 00:10:14.815
Definitely make sure to check it out and compare the code, even clone it if you need to.

00:10:15.103 --> 00:10:19.327
If you like the project, definitely make sure to leave a star as well.

00:10:19.759 --> 00:10:25.977
With that said, while our dependencies are still installing, we can go ahead to Stream and create a free account.

00:10:26.388 --> 00:10:27.588
We're definitely gonna need it.

00:10:27.851 --> 00:10:30.078
The link to stream is going to be down in the description.

00:10:31.278 --> 00:10:34.680
Now that we're here, let's click try for free inside of here.

00:10:34.899 --> 00:10:41.759
You'll of course have to enter your email also, your organization name or your full name.

00:10:42.102 --> 00:10:46.847
I'm just gonna do Javascript, Dash Mastery and finally your password.

00:10:47.519 --> 00:10:55.812
Now that you've entered all the information simply click, Get started and with that you're already welcome to Stream on the top.

00:10:56.096 --> 00:10:58.239
Right you can click go to Dashboard.

00:10:58.958 --> 00:10:59.652
There we go.

00:10:59.999 --> 00:11:08.410
Our demo production application has been created, There is our key and our secret which we're gonna use soon enough to create our entire chat application.

00:11:08.741 --> 00:11:13.253
For now, you can leave this page open and let's go back to our code editor.

00:11:13.626 --> 00:11:17.725
Our packages have been installed and we are ready to start creating this app.

00:11:18.148 --> 00:11:24.399
So let's close this and this and we only need app.jsx for now inside of here.

00:11:24.639 --> 00:11:29.259
We'll have to import a few things that we're going to use later on to connect to stream chat.

00:11:29.639 --> 00:11:47.039
So let's say import stream chat from Stream Dash Chat and we're going to also need the React component which is going to be import chat in curly braces from Stream Chat React later on in our app.

00:11:47.279 --> 00:11:53.946
We're also going to use cookies so we can say import cookies from Universal Cookie.

00:11:54.879 --> 00:12:00.604
Great! Now we have all the imports right here to set up our chat.

00:12:00.835 --> 00:12:10.159
We're gonna need an api key so we can say const api key is going to be equal to and now we need to find this key inside of our stream dashboard.

00:12:11.278 --> 00:12:13.263
As you can see, the key is right here.

00:12:13.511 --> 00:12:17.419
You can simply copy it, go back and paste it right here.

00:12:17.749 --> 00:12:20.669
We're going to use this to initialize our chat.

00:12:21.039 --> 00:12:37.999
now that we have that we're going to remove this H1 and we're going to give a class name to this Div Div class name is going to be equal to a string of app, underscore, underscore wrapper, and inside of there we're going to render dot chat.

00:12:38.919 --> 00:12:41.759
Application chat is not going to be a self-closing tag.

00:12:42.080 --> 00:12:43.679
We're gonna put something in there.

00:12:44.000 --> 00:12:48.399
More specifically, we have to put the channel container and the channel list container.

00:12:48.707 --> 00:12:54.833
These are all going to be components that we are going to create, so let's simply specify them.

00:12:55.222 --> 00:13:12.240
Right now, we're going to have a channel list container, which is going to be a self-closing component and below that, we're also going to have channel container Again, we don't yet have those components, but we're going to create them right away.

00:13:13.519 --> 00:13:20.799
Also, for this chat to work, we need to create an instance of a stream chat so we can do that right here above our component.

00:13:21.199 --> 00:13:32.835
We can say const client is equal to stream chat dot, get instance and then we can call that as a function and pass in the api key.

00:13:33.306 --> 00:13:40.958
Finally, we can specify client is equal to client We can also choose a theme of our application.

00:13:41.259 --> 00:13:45.919
In our case, I'm going to say theme is equal to team lite.

00:13:46.799 --> 00:13:50.932
This is going to make our chat application look a bit better, right out of the box.

00:13:51.278 --> 00:14:06.251
Okay, we've set some things up, but we don't have access to these components, so what might be best is to create a components folder right away and to create the basic structure of all the components that we're going to have.

00:14:06.559 --> 00:14:08.183
There are going to be quite a lot.

00:14:08.415 --> 00:14:16.527
but if we nail down all the components and the imports at the start of the video, it's going to be so much easier to simply keep using them later on.

00:14:16.958 --> 00:14:22.958
So, inside of the components folder, we can first create two components: the channel container and the channel list container.

00:14:24.159 --> 00:14:41.278
So right here: New File Channel Container.jsx and also Channel List Container.jsx and you guys often ask me what is the difference between Js and Jsx, There is none.

00:14:42.159 --> 00:14:46.440
I just prefer to use Jsx for whenever a file is a React component.

00:14:46.769 --> 00:14:49.440
That way, it's easier to differentiate them.

00:14:50.000 --> 00:14:50.000
Okay.

00:14:50.259 --> 00:14:57.759
With that said, we can create a simple React Arrow function component and we can specify the name of that component like this.

00:14:58.399 --> 00:15:04.719
Now that we have it, it's going to be simple to simply copy and paste this across all the components we are about to create.

00:15:05.278 --> 00:15:13.711
We can paste it here as well, and you can double click the name of the component, press Ctrl F, and then simply change it to something else.

00:15:14.078 --> 00:15:18.399
In this case, that's going to be Channel List Container.

00:15:20.000 --> 00:15:23.600
Great! The two components we need right now are done.

00:15:23.920 --> 00:15:27.965
So if we go to App.js we can simply try to import them.

00:15:28.353 --> 00:15:28.742
like import.

00:15:29.130 --> 00:15:31.519
That's going to be channel like this.

00:15:31.959 --> 00:15:33.719
Let me just copy it.

00:15:34.159 --> 00:15:37.781
Channel List Container I misspelled it there, so let's fix it.

00:15:38.067 --> 00:15:48.958
Channel List Container from dot slash components slash Channel List Container and the other one is simply going to be Channel Container.

00:15:50.320 --> 00:15:50.320
Great.

00:15:50.624 --> 00:15:54.139
As you can see, we only have two, so this is fine.

00:15:54.529 --> 00:16:01.625
Two imports, two lines, but later on, we're going to have so many more imports and it's going to look like something like this.

00:16:02.078 --> 00:16:03.367
This is not what we want.

00:16:03.625 --> 00:16:08.960
So we're going to create a system for imports that's going to make her life easier in the long run.

00:16:09.600 --> 00:16:17.333
If we go in our components folder and create a new index.js file inside of there, we'll be able to export all the components automatically.

00:16:17.786 --> 00:16:30.799
We can do that by saying export curly braces default as and then the name of the component something like Channel Container from and then we point to that file.

00:16:31.177 --> 00:16:45.066
We can now duplicate this and inside of here this is going to be Channel List Container Great! Now these components are being exported straight from the components folder and inside of our app.

00:16:45.360 --> 00:16:58.111
We can say something like this: import now in curly braces that's going to be Channel List container and also Channel Container straight from dot slash components.

00:16:58.799 --> 00:17:07.693
We don't need to add any file names because everything is being exported from there and now all of the imports are being done in one line.

00:17:08.160 --> 00:17:10.160
There we go again.

00:17:10.368 --> 00:17:15.225
I know this was a bit of work, but it's going to make our life so much easier later on.

00:17:15.919 --> 00:17:18.739
At this point, we should already see something on the screen.

00:17:19.039 --> 00:17:27.359
So let's open up our terminal by going to view terminal, clearing the console, and simply running Npm start.

00:17:28.000 --> 00:17:32.217
This is going to start our application on localhost 3000. There we go.

00:17:32.708 --> 00:17:39.701
Our application started, but as you can see, we don't have anything on the screen yet besides these two text elements.

00:17:40.147 --> 00:17:44.219
so let's go ahead and add some styles to fix that at the end.

00:17:44.489 --> 00:17:55.919
This application is going to look great, but to keep this video focused and extremely informational only about building chat applications, I'm going to provide you with the entire Css style sheet.

00:17:56.720 --> 00:17:58.571
We're going to use the Bem methodology.

00:17:58.880 --> 00:18:05.079
Bem is a Css methodology that kind of helps everybody understand how Css class names are made.

00:18:05.420 --> 00:18:10.880
We first have the block and then we have underscores with the element and then finally we have modifiers.

00:18:11.234 --> 00:18:18.106
So you're going to learn how to write these class names, but I'm going to provide you with the styles to create the styles.

00:18:18.355 --> 00:18:25.059
We can go inside of our source folder and create a file called app.css inside of there.

00:18:25.269 --> 00:18:26.319
We're going to paste our styles.

00:18:27.759 --> 00:18:29.880
All of the styles for our application are here.

00:18:30.400 --> 00:18:36.439
You can find these styles and all of the links mentioned in this video are going to be right below in the description.

00:18:36.739 --> 00:18:47.959
So just make sure to check that gist and simply copy and paste these styles right into the app.css Then we can go inside of our app.jsx and right inside of here.

00:18:48.229 --> 00:18:59.425
You can simply say import dot slash App.css This is going to import all of our styles and we'll be able to use these class names to immediately apply them.

00:18:59.919 --> 00:19:03.079
Great! Let's check out if this made any changes already.

00:19:03.919 --> 00:19:05.299
No, nothing special that we can see.

00:19:05.529 --> 00:19:09.131
It just removed some margins and made everything appear in a list.

00:19:09.474 --> 00:19:15.359
But of course as we add more styles and class names, this application will start to look phenomenal.

00:19:16.160 --> 00:19:19.553
With that said, the basic layout of our application has been created.

00:19:19.885 --> 00:19:23.200
Now is the time that we keep adding more Jsx, more structure.

00:19:23.663 --> 00:19:29.200
But more importantly, keep getting into the logic of how we can implement our chat application.

00:19:29.759 --> 00:19:34.000
Let's start with creating our Channel List container, which is basically our sidebar.

00:19:35.519 --> 00:19:39.622
Now let's first import a few things from Stream Chat React.

00:19:40.114 --> 00:19:53.539
We can import a Channel List component and also use Chat context that's going to be coming from Stream Dash, Chat, Dash, React.

00:19:54.400 --> 00:20:09.967
Then we can import a few components that we are going to create ourselves something like Channel Search, also, Team Channel List, and finally Team Channel Preview.

00:20:10.798 --> 00:20:18.022
These components will be coming from dot slash from R Components, and finally in this component as well.

00:20:18.319 --> 00:20:24.319
We're going to use cookies so we can say import cookies from Universal Cookie.

00:20:25.439 --> 00:20:30.571
Great! Now that we have that, let's start creating our Jsx for the Sidebar.

00:20:31.005 --> 00:20:37.897
So above our current Channel list component, we can create a new functional component which is going to be called Sidebar.

00:20:38.240 --> 00:20:53.599
Our sidebar can have an instant return, so just parentheses right there and then inside of there we can start creating some Jsx First, we're going to have a Div that's going to have a class name equal to channel Dash list, underscore, underscore, Sidebar.

00:20:54.640 --> 00:21:10.773
And inside of that div, we're going to have one more Div which is going to have a class name which is going to be equal to Channel Dash list, underscore, Underscore, Sidebar, Underscore, Underscore, Icon 1, and just one more Div inside of it.

00:21:11.066 --> 00:21:18.159
This div is going to have a class name equal to Icon 1, underscore, Underscore, Inner Great.

00:21:18.593 --> 00:21:20.331
Finally, we have that icon.

00:21:20.765 --> 00:21:23.222
So that's going to be an image, which is a self-closing tag.

00:21:23.565 --> 00:21:29.980
It's going to have a source Src equal to hospital icon.

00:21:31.119 --> 00:21:37.460
This is the icon that we're going to import right away, and it's going to have the alternative text equal to hospital.

00:21:38.079 --> 00:21:41.038
And finally, it can have width equal to 30..

00:21:42.319 --> 00:21:47.660
Great! Now that we're here, let's also import that icon just at the top.

00:21:48.079 --> 00:21:57.748
We can say import hospital icon from dot slash Assets slash Hospital dot Png.

00:21:58.480 --> 00:22:02.960
As you can see, we don't yet have the Assets folder, so let's create it right now.

00:22:03.382 --> 00:22:10.159
Above the components right inside of the source folder, you'll be able to simply paste the assets folder.

00:22:10.720 --> 00:22:27.551
As with all the other files mentioned, the assets folder is going to be linked in the description Great, as you can see that assets contain a few Svgs which are going to be our icons, and then it also contains a few Png icons, screens, and images.

00:22:28.400 --> 00:22:30.731
Great! Now we can use that icon.

00:22:31.119 --> 00:22:31.119
now.

00:22:31.409 --> 00:22:35.359
I'm going to copy this sidebar icon 1 and duplicate it below.

00:22:35.839 --> 00:22:38.159
This time it's going to be Sidebar Icon 2.

00:22:39.200 --> 00:22:44.639
Icon One enter is going to remain the same, but this time we're gonna have a logout icon.

00:22:45.679 --> 00:22:51.279
Also, the alt is going to be equal to log out and the width is going to be 30 pixels.

00:22:52.558 --> 00:23:04.960
For now, we can simply duplicate this line and say import logout icon from and that's going to be logout.png Great! This is it for our sidebar.

00:23:05.306 --> 00:23:07.759
Now we can go inside of our Channel list container.

00:23:08.137 --> 00:23:21.093
I'm gonna make this div a simple react fragment and then inside of there we're gonna render that sidebar as a self-closing tag, make sure it's spelled correctly and there we go.

00:23:21.519 --> 00:23:32.387
Of course we could have put the entire code right there, but as our code is going to get more complicated, we want to differentiate different parts of Jsx to make it easier for people to read.

00:23:32.798 --> 00:23:36.628
Now that they've done that, let's go into our browser and let's check it out.

00:23:36.960 --> 00:23:39.490
As you can see, this already looks just a bit better.

00:23:39.779 --> 00:23:46.559
Now we no longer have the Channel list container which is actually just the navigation bar and now we're displaying it.

00:23:47.200 --> 00:23:50.319
Now let's keep adding more things to our navigation bar.

00:23:51.038 --> 00:23:57.440
The second thing we're going to add is going to be another functional component called Company Header.

00:23:59.119 --> 00:24:27.119
Again, just a functional component with an instant return, just parentheses and then inside of there we're gonna have a div that div is going to have a class name equal to Channel Dash List, underscore, Underscore header, and inside of there, we're gonna have just one paragraph tag, which is going to have a class name equal to Channel Dash list, underscore, underscore header, and then underscore underscore text.

00:24:28.400 --> 00:24:33.577
Again, this is going to be a medical pager, so we can specify that there.

00:24:34.000 --> 00:24:54.880
Finally, we're gonna render that company header right inside of Div, below the sidebar, so we can create that div, give it a class name, which is going to be equal to Channel Dash list, Underscore, Underscore List, Underscore, Underscore wrapper, and right inside of that list, we can render our company header.

00:24:55.440 --> 00:24:56.832
Let's save it and take a look.

00:24:57.064 --> 00:25:04.693
As you can see, we added this entire portion and just below, we'll be able to display our search and all of the channels.

00:25:05.119 --> 00:25:17.226
So as you can see, Stream is not simply building everything out for you, it's giving you access to the apis which are going to allow you to search channels, create channels, send messages, and everything else.

00:25:17.640 --> 00:25:23.719
but you actually create the Jsx, the layout, and the styling for your application.

00:25:24.558 --> 00:25:31.919
Now, let's implement these three most important components: the Channel Search theme, Channel List, and Team Channel Preview.

00:25:32.960 --> 00:25:34.731
We can start with Channel Search.

00:25:35.085 --> 00:25:41.679
I'm going to go to our components folder, create a new file called Channel Jsx.

00:25:43.200 --> 00:25:52.479
Of course, as soon as I created, I'm gonna duplicate one more line inside of our index, and I'm gonna add our Channel Search right there.

00:25:53.278 --> 00:26:12.102
Don't forget to do that because this import right here is not going to work Then With that said, how do we implement a Channel Search? Well, our Channel search is going to be a functional component, so we can simply import React, create that functional component, and export it alongside React.

00:26:12.445 --> 00:26:33.079
We're going to also need use State and use Effect Hooks and we're going to need the context from Stream Chat React so we can say use Chat context and that's going to be coming from Stream Chat React inside of here.

00:26:33.339 --> 00:26:43.679
We're also going to have one icon so we can say import in curly braces search icon and that's going to be coming from dot slash Assets.

00:26:45.278 --> 00:26:48.559
Great! Now let's start creating the Jsx for our search.

00:26:49.038 --> 00:27:24.736
This Div is going to have a class name equal to Channel Dash Search Underscore Underscore Container Inside of that Div, we're going to have yet another Div, and this Div is going to have a class name equal to Channel Dash Search Underscore, Underscore Input Underscore Underscore Wrapper Now inside of that, we're gonna have one more Div and this Div is finally going to have a class name of Channel Dash Search Underscore Underscore Input Underscore Underscore Icon in there.

00:27:25.074 --> 00:27:31.278
we can place our Svg icon by saying search icon and calling it like a self closing tag.

00:27:32.640 --> 00:27:35.840
Now, of course, below this Div, we can actually place our input.

00:27:36.160 --> 00:28:02.943
So I'm going to say input and it's going to have its own class name which is going to be equal to channel Dash Search Underscore Underscore Input Underscore underscore Text Of course we'll have to provide it with a few more properties things like a placeholder equal to search, a type equal to text and finally, we have to give it a value and also the on change.

00:28:03.440 --> 00:28:10.269
Now that we can see, we have a lot of props on this component, I'm gonna simply space them out, each in its own row.

00:28:10.720 --> 00:28:18.053
Okay, so as we said, input has two most important things and those are value and on change.

00:28:18.880 --> 00:28:28.150
So what value is this input going to have? Well, it's going to be query the search query we're looking for and what are we going to do on change.

00:28:28.398 --> 00:28:35.485
Well, we're going to call the on search function So just above, let's create that query state field.

00:28:35.851 --> 00:28:42.613
I'm going to say const open pair of square brackets and that's going to be query and set.

00:28:43.120 --> 00:29:24.519
Query is equal to use state and at the start we can set it up to be empty string below that let's create that method for getting our search So we can say const on search is equal to we're going to get an event there and what we can do is simply first call the event.preventdefault We have to do this every time that you have an input or buttons or things like that because the usual browser behavior is whenever you click, submit or something similar to reload the page we're working with, React, we want everything to be reactive, instantaneous, and we want to prevent that.

00:29:24.799 --> 00:29:27.119
So that is what this line is doing.

00:29:27.759 --> 00:29:32.719
Now that we have that, what we can do is, we can also set the loading to be equal to true.

00:29:33.359 --> 00:29:44.009
Of course, the loading is going to be another state, so I'm going to duplicate this one and simply create a state field of loading and set loading at the start.

00:29:44.558 --> 00:29:48.845
Our loading is going to be set to false, so we can do that right here.

00:29:49.200 --> 00:29:52.599
Now that we've set the loading to true, we can finally set the query.

00:29:52.959 --> 00:30:06.834
So what exactly are we searching for? Well, we're searching for event.target.value Remember, in React, whenever you type something into the input, you get the value of that text under the event target value.

00:30:07.302 --> 00:30:11.128
And finally, the last thing we want to do is we want to get the chat channels.

00:30:11.430 --> 00:30:17.980
For that, we can call a new function called Get Channels to that function.

00:30:18.250 --> 00:30:25.519
We of course also have to provide the searched query so we can simply say event target value one more time.

00:30:26.720 --> 00:30:29.576
Of course you can see this function is not yet existent.

00:30:29.965 --> 00:30:31.131
so let's create it.

00:30:31.519 --> 00:30:33.013
Const: Get channels.

00:30:33.759 --> 00:30:39.572
This function is going to be an async function because we have to wait for the channels to be fetched.

00:30:40.159 --> 00:30:47.309
Now that we have that it's going to accept the text we're searching for and inside of here, we can open a try and catch block.

00:30:47.660 --> 00:30:49.759
We'll try to get the actual channels.

00:30:50.029 --> 00:30:51.919
If we cannot, we'll go to the error.

00:30:52.960 --> 00:30:57.360
So if we have an error, we can simply set the query to be equal to nothing.

00:30:57.680 --> 00:30:59.012
Just reset the search.

00:30:59.519 --> 00:31:07.599
But how exactly are we gonna get the channels? Well, we have to do that later on because we haven't yet set up our entire chat application.

00:31:08.960 --> 00:31:11.200
So I'm simply going to add a to do right here.

00:31:11.690 --> 00:31:14.629
And I'm going to say Fetch Channels.

00:31:15.119 --> 00:31:20.640
By the way, if you're wondering, why is this comment orange, That's because I'm using an extension called Better Comments.

00:31:20.960 --> 00:31:25.813
I find it to be pretty useful if you want to have a to-do you can just type to do.

00:31:26.240 --> 00:31:32.199
or you can make something green like this, or even add an exclamation mark to make it red.

00:31:32.720 --> 00:31:34.452
so it's just coloring the comments.

00:31:34.798 --> 00:31:36.937
Basically, we have our to-do here.

00:31:37.211 --> 00:31:38.591
That's something we have to do later.

00:31:38.799 --> 00:31:47.298
Of course we have to do it once we actually have the logged in user to the chat and once we have a few chat messages, direct messages, channels, and so on.

00:31:47.598 --> 00:31:51.840
So for now, the important part is that our Jsx is done later on.

00:31:52.240 --> 00:31:55.679
we're gonna implement the logic before taking a look in the browser.

00:31:55.919 --> 00:31:57.699
I just noticed that I have a typo here.

00:31:57.919 --> 00:32:05.839
that's gonna be assets Now that we fixed that part, let's actually use our Channel search inside of our Channel List container.

00:32:06.179 --> 00:32:11.199
We are importing it, but if you scroll down, you'll notice that we're never using it.

00:32:11.679 --> 00:32:15.679
So to use it, we can call it as a self-closing component right here.

00:32:16.319 --> 00:32:21.038
So to use it, we can call it just below our company header as a self-closing component.

00:32:21.409 --> 00:32:23.629
Let's save it and take a look.

00:32:24.000 --> 00:32:24.519
there we go.

00:32:24.779 --> 00:32:28.079
Our search bar with the search icon is right in here.

00:32:28.480 --> 00:32:32.939
Of course if you start typing something, it's not gonna work because we don't have users yet.

00:32:33.249 --> 00:32:39.759
So now let's create the layout for the channels and for direct messages and then we'll move on to the channel container.

00:32:40.558 --> 00:32:43.028
Next component on our list is the Team Channel list.

00:32:43.417 --> 00:32:56.817
So inside of the components, let's just create it theme, channel list, dot Jsx, and we're again going to use the Rafce to simply create a functional component inside of here.

00:32:57.066 --> 00:33:00.487
We won't have to import a lot of things, this is just a list.

00:33:00.763 --> 00:33:05.119
So what we can do is simply import add channel.

00:33:05.502 --> 00:33:13.130
This is going to be an Svg icon from dot slash Assets and that's going to be it.

00:33:13.519 --> 00:33:16.519
So now let's create the Jsx off our channel list.

00:33:17.200 --> 00:33:26.409
So right inside of here, we'll have a lot of variables that we can work with and how are we gonna pass them? Well, they're going to be passed for us by using Stream.

00:33:26.740 --> 00:33:29.559
So let's go back to our channel container.

00:33:30.398 --> 00:33:38.039
We named our component team Channel list, but notice that we also have the channel list coming from Stream Chat React.

00:33:38.480 --> 00:33:47.440
So if we scroll down, let me show you how we're going to call it first, just below the company search we're going to call the channel list.

00:33:48.558 --> 00:33:53.492
Channel list is a self-closing component, but it accepts a few props.

00:33:53.919 --> 00:33:55.153
First, it accepts filters.

00:33:55.564 --> 00:33:59.546
Filters is an object that's going to allow us to filter some messages.

00:34:00.240 --> 00:34:05.440
Then we're also going to have the channel render filter function.

00:34:05.680 --> 00:34:10.329
This is a function that we can call and based on that, we can also pass on filters.

00:34:10.659 --> 00:34:13.958
So again, right now, I'm going to leave this empty.

00:34:14.398 --> 00:34:17.253
And finally, the most important thing is the list.

00:34:17.546 --> 00:34:20.025
So we can say list with a capital L.

00:34:20.452 --> 00:34:21.732
That's an important part.

00:34:22.159 --> 00:34:25.119
That means that we want to render a custom list.

00:34:26.000 --> 00:34:28.559
We can do that by providing a callback function.

00:34:29.679 --> 00:34:33.579
We get access to all the list props right inside of here.

00:34:33.920 --> 00:34:40.559
And finally, we can render the component we've created, which is called the team Channel List.

00:34:41.119 --> 00:34:47.153
So basically what's happening is Stream allows you to get a channel List component right out of the box.

00:34:47.496 --> 00:34:55.185
It's going to look good, but we still want to create our own custom team Channel list and that's exactly what we're doing.

00:34:55.599 --> 00:35:00.000
So we're getting all of these list props and we can simply spread them right here.

00:35:00.239 --> 00:35:05.183
So that's going to be dot dot list props inside of the curly braces.

00:35:05.599 --> 00:35:12.213
That means that our custom component will get all the props that the channel list would usually get using stream.

00:35:12.719 --> 00:35:17.000
Now, when it comes to filters, I'm simply going to put that as an empty object right now.

00:35:17.519 --> 00:35:22.352
And for the channel filter function, we're gonna just leave that as an empty callback function.

00:35:22.943 --> 00:35:24.127
Just like this.

00:35:24.719 --> 00:35:25.253
Let's save it.

00:35:25.519 --> 00:35:31.529
and now let's make use of all of these props we're passing to our team channel list going right in here.

00:35:31.800 --> 00:35:34.000
Now we can get access to them.

00:35:34.559 --> 00:35:39.159
The first prop that every single React component has is the children property.

00:35:39.679 --> 00:35:43.581
Then we're going to have the error which we're going to set to false at the start.

00:35:43.838 --> 00:35:57.280
We also have the loading and we also have the type that type is going to be dependent on are we in group chats or just direct messages? So let's first handle the errors at the top.

00:35:57.528 --> 00:36:08.559
We can say if error we're going to return something, but before we have to check out the type, if the type is equal to team, then we want to return an error message like this.

00:36:09.519 --> 00:36:14.559
Right Here, we'll specify the Jsx and if it's not team, we simply want to return null.

00:36:15.059 --> 00:36:16.059
It doesn't exist.

00:36:16.559 --> 00:36:20.434
So how is the Jsx for this going to look like? Well, right here.

00:36:20.891 --> 00:36:51.039
let's create a div and that div is going to have a class name which is going to be equal to Team Dash Channel Dash List Below that we're gonna have one paragraph tag so P tag that's gonna have a class name equal to Team Channel list, underscore, underscore message and inside of there we can simply say Connection Error Please wait a moment and try again.

00:36:52.000 --> 00:36:54.339
Great, That's about it for the error.

00:36:54.729 --> 00:36:58.009
Now we can actually create the loading part so just below this.

00:36:58.279 --> 00:37:06.889
If we're going to create if loading inside of there, we're also going to have a return statement and let's return the same div that we already have.

00:37:07.139 --> 00:37:11.640
So we're going to copy the div with the paragraph and paste it right here.

00:37:12.320 --> 00:37:20.765
This one is going to be Team Channel List Team Channel List message, but we're going to add loading to this so it's going to be space loading.

00:37:21.097 --> 00:37:29.324
and then finally, instead of the error message, we're going to open a dynamic block and we're going to say if type is triple equal to team.

00:37:29.626 --> 00:37:40.933
In that case, we want to say channels else we want to say messages And then finally, we're going to add loading dot dot.

00:37:42.000 --> 00:37:43.559
This is our loading.

00:37:44.079 --> 00:37:48.648
Now that we've handled the error state and the loading state, we can actually show our lists.

00:37:49.013 --> 00:38:12.868
So this div is going to have a class name equal to Team Dash Channel Dash List below that we're going to have one more Div and this div is going to have a class name equal to Team Dash Channel Dash List, Underscore Underscore Header and as we had so far, we're going to have one more paragraph.

00:38:13.222 --> 00:38:30.932
So let's create a paragraph tag and this P tag is going to have a class name equal to Team Dash Channel Dash List Underscore, Underscore header, Underscore Underscore Title A lot of underscores there.

00:38:31.358 --> 00:38:44.880
So what we can say is we can simply copy this dynamic block, paste it here, and if it is a team chat, in that case, we can simply say channels Else we can say direct messages.

00:38:46.480 --> 00:38:48.380
That's about it and below this.

00:38:48.760 --> 00:38:53.866
Later on, we're going to have a button to add the channel.

00:38:54.480 --> 00:38:54.639
Right now.

00:38:54.799 --> 00:38:58.159
we're going to leave that blank, but later on you know it has to be here.

00:38:59.280 --> 00:39:07.239
And finally, outside of this first Div, we want to render the children everything that has been passed to our Team Channel list.

00:39:07.500 --> 00:39:09.600
We want to render it right here.

00:39:10.400 --> 00:39:10.400
Great.

00:39:10.710 --> 00:39:14.543
With that, we are almost done with our Team Channel List component.

00:39:14.960 --> 00:39:21.225
Let's go into our index.js and let's export it from there so that we can use it in our Channel List container.

00:39:21.599 --> 00:39:26.079
That's gonna be Team Channel List.

00:39:27.760 --> 00:39:30.648
Now that we are exporting it, let's see where we are using it.

00:39:30.871 --> 00:39:33.119
That's going to be in the Channel List container.

00:39:33.460 --> 00:39:38.764
as you can see at the top right here we're importing it and we're using it, right here.

00:39:39.061 --> 00:39:41.023
and passing all the list props.

00:39:41.440 --> 00:39:44.537
But remember, we also have to pass the type.

00:39:44.880 --> 00:39:46.992
The type is going to be equal to team.

00:39:47.255 --> 00:39:59.329
We have to do that specifically because below we're going to have this exact same channel list, but the type is going to be messaging for direct messages so we need to be able to differentiate them.

00:39:59.679 --> 00:40:01.599
Let's save it and take a look.

00:40:01.920 --> 00:40:02.519
There we go.

00:40:02.819 --> 00:40:04.318
Right now we have connection error.

00:40:04.661 --> 00:40:05.690
Please wait a moment.

00:40:06.033 --> 00:40:18.026
That makes sense because we haven't yet connected anything, but we have it here for later on Now We also have to implement the last component in this file which is the theme Channel Preview.

00:40:18.639 --> 00:40:25.480
So let's create that component called Team Channel Preview dot Jsx.

00:40:26.559 --> 00:40:30.679
Not to forget, let's go to the index and let's quickly export it from there.

00:40:31.039 --> 00:40:41.013
That's going to be Team Channel Preview Back in here we can run rafce to get our simple code running.

00:40:41.439 --> 00:40:44.820
The situation with our Team Channel preview is going to be the same.

00:40:45.159 --> 00:40:48.670
as with our Team Channel list, we're going to get a lot of props.

00:40:48.880 --> 00:40:50.731
They're going to get passed into it.

00:40:51.039 --> 00:41:01.480
So by going here we can simply specified one more prop which is going to be called Preview and that is going to be equal to a callback function with an instant return.

00:41:02.400 --> 00:41:12.133
Right there we get preview props and now we can render our own component which we called Team Channel Preview.

00:41:13.280 --> 00:41:14.994
Now we can spread those props.

00:41:15.337 --> 00:41:19.208
So dot Preview Props and finally we also have to pass.

00:41:19.413 --> 00:41:23.649
the type which is going to be the same type is equal to team.

00:41:24.079 --> 00:41:31.819
Now that we have all the necessary components in our Team Channel Preview, we can go back and we can use them right inside of our props.

00:41:32.239 --> 00:41:40.262
The props we need for now are gonna be channel and also type great inside of this component.

00:41:40.617 --> 00:42:01.760
We'll also use a few more things from Stream Chat React so we can say import and that's going to be avatar for images and also use Chat Context and this is coming from Stream Dash Chat React Now that we have these things, let's actually use that context.

00:42:02.186 --> 00:42:25.306
So right inside of here we can say const the things we need to get are going to be the channel and also the client that is coming from use chat context and we call it as a hook I'm going to rename the channel right here to say Active Channel because we're already getting a channel at the top.

00:42:25.760 --> 00:42:32.559
With that said, let's create a block of Jsx which is going to be called Channel Preview So right here.

00:42:33.253 --> 00:42:40.119
Channel Preview As we've done before, it's going to be a functional component just to simplify the life for us.

00:42:40.480 --> 00:42:59.919
Later on and inside of here it's only going to be a simple paragraph tag with a class name which is going To be equal to channel Dash preview, underscore, underscore item and there we can say hash or pound sign and we can specify the name of the channel.

00:43:00.159 --> 00:43:17.249
We can get to the channel name by saying Channel.data.name I'm going to add a question mark before the dot for the data and the name to make sure that we have the channel before we want to access something else or maybe the channel doesn't have a name.

00:43:17.519 --> 00:43:30.011
In that case, we can use or and then say Channel Questionmark.data Questionmark.id This is a preview for the channel with multiple users, but now let's create a preview for direct messages.

00:43:30.388 --> 00:43:40.839
We can do that by saying const direct preview is going to be equal to and then we instantly return it and there we're going to have.

00:43:41.299 --> 00:43:51.690
Const members is equal to channel dot state dot members but unfortunately the data that we get back is not going to be an array.

00:43:52.000 --> 00:44:07.940
While you might think we're gonna get an array with different objects like this, what actually happens is we get back an object like this and then that object has the Ids one, two, three and then there's the user object.

00:44:08.400 --> 00:44:15.358
So it's going to look like this because each user has a specific Id and then based on that, we're going to show their data.

00:44:16.400 --> 00:44:26.279
So what we need to do is we need to turn an object with again objects as keys and values to simply an array of objects that we can map through.

00:44:26.960 --> 00:44:39.653
So let's remove this and this and let's use the built in javascript object dot values that's going to give us the values of all the items in that specific members object.

00:44:40.400 --> 00:44:44.480
Once we get that, we also want to filter through that so we can call the filter method.

00:44:45.358 --> 00:44:50.920
Filter accepts a callback function and in this case we want to filter through the members.

00:44:51.259 --> 00:44:59.404
So in here we get each member, but to get the data about that member, we have to destructure it and then specify the user.

00:44:59.715 --> 00:45:04.520
So this is how we're accessing each specific user in that object.

00:45:05.760 --> 00:45:14.409
Then we want to check if the user dot id is not equal to client dot, user uppercase Id.

00:45:14.739 --> 00:45:20.559
make sure that you have the Id all uppercased and close the parentheses properly.

00:45:21.519 --> 00:45:31.469
So what we're doing here is we're mapping over all the users and we're keeping all the ones where the Id is not equal to the client Id, which is our.

00:45:31.838 --> 00:45:37.391
So we're basically throwing ourselves outside of that chat so we can get the actual users we're talking to.

00:45:37.838 --> 00:45:46.079
I've noticed this is not going to be an instant return, so I can just switch this to curly braces and in that case, we have to remove one parentheses.

00:45:47.599 --> 00:46:08.599
Great! Now we have the members, but they're not including ourself So right inside of here, let's return a block of Jsx We can say div There, we're to have a class name which is going to be equal to channel dash, preview, underscore, underscore item, and then space single.

00:46:09.199 --> 00:46:14.582
Inside of there, we're going to specify our avatar avatar is just the user's image.

00:46:14.970 --> 00:46:26.739
So inside of there we can pass the image property which is going to be equal to members 0 and then question mark dot user, dot image like this.

00:46:27.110 --> 00:46:35.119
Finally, we can also pass the user's name which is going to be members zero dot, user, and then dot full name.

00:46:36.079 --> 00:46:42.612
Make sure to add question marks before all of these because we always need to know that the user actually exists.

00:46:43.119 --> 00:46:55.634
Finally, we can specify the size which can be equal to a number of 24. Finally, below this avatar, we can also have a P tag and then in here we can list our member's name.

00:46:55.965 --> 00:47:00.579
We already have that, so I'm going to copy the name and just put it here.

00:47:00.960 --> 00:47:03.559
Now we have the Channel preview and the direct preview.

00:47:03.919 --> 00:47:07.519
Let's actually use these components inside of our team Channel Preview.

00:47:09.119 --> 00:47:15.075
So this Div is going to have a different class name depending on if the current chat is selected or not.

00:47:15.404 --> 00:47:19.072
So we can say class name is equal to.

00:47:19.288 --> 00:47:31.706
we're going to put it as a dynamic block In here we can say channel question mark dot Id and if it's triple equal to active channel question mark dot Id.

00:47:32.035 --> 00:47:55.359
So if they are the same, our class name is going to be Channel Dash Preview Underscore Underscore Wrapper Underscore Underscore selected else it's simply going to be Channel Dash Preview and then Underscore underscore wrapper it's not selected Of course this also has to be a string and with that, we've entered our class name.

00:47:55.838 --> 00:48:00.868
So still inside of our div, we're gonna add an onclick property on our click.

00:48:01.280 --> 00:48:11.519
We're gonna of course select the actual channel, but for now, we can simply console log the channel name so we can say channel right here.

00:48:11.919 --> 00:48:16.579
Great and then of course inside of this div dependent on the type.

00:48:16.960 --> 00:48:19.679
So we have to say if type is equal to team.

00:48:19.989 --> 00:48:29.358
In that case, we're going to render the channel preview and then if it's not, we're going to render the direct preview great.

00:48:29.709 --> 00:48:32.159
This is it for our component for now.

00:48:32.509 --> 00:48:37.900
Of course, I don't think any chats will be showing because we don't yet have the users.

00:48:38.210 --> 00:48:48.079
So soon enough, it might be a good time to actually start implementing the logic for creating the authentication, getting our users in there, and displaying the data.

00:48:48.500 --> 00:48:51.119
So for now, let's go back to our channel list container.

00:48:51.503 --> 00:48:59.725
Considering that we don't currently have any chats, unfortunately, the preview is going to be empty below this channel list.

00:49:00.034 --> 00:49:06.800
We need to create one more exactly the same channel list below the channel list for group messages.

00:49:07.119 --> 00:49:14.639
We also need to have a channel list for direct messages, so simply select it and then duplicate it below.

00:49:15.039 --> 00:49:24.880
We're going to have just a few small differences, for example, in the list, we're going to render the team channel list, but the thing we're going to pass over is going to be messaging.

00:49:25.199 --> 00:49:31.852
so that's the type of the actual team channel list, and you can simply paste that here as well.

00:49:32.318 --> 00:49:40.800
So now, once we actually get everything to work, you should be able to see two different channel lists, one for the group messages and one for the private ones.

00:49:42.400 --> 00:49:47.657
Right now, we still have an error and that makes sense because we are not currently logged in.

00:49:47.965 --> 00:49:59.739
we don't exist in database and there aren't any channels or direct messages, so now might be a good time to implement authentication and the entire logic that comes with it.

00:50:00.009 --> 00:50:10.900
We have to create a node.js server, create endpoints for the sign up in the login, and then finally send the data from the frontend to the backend to create a user in the database.

00:50:11.280 --> 00:50:16.495
So let's go ahead and first create the frontend layout for our authentication.

00:50:17.199 --> 00:50:29.920
To do that, we can close all the current files, collapse everything, go inside of the client source, and then finally app.jsx Instead of here, we're going to import Auth.

00:50:30.195 --> 00:50:35.919
Auth is going to be a new component where our login and registration form are going to be in.

00:50:36.239 --> 00:50:49.358
So when do we want to render that Auth? Well, we're going to have a variable which is going to be something like Auth token and this odd token is going to be available only if we've actually logged in.

00:50:49.687 --> 00:50:51.661
So for now, we don't have it.

00:50:51.990 --> 00:51:01.199
It's going to be false and based on that variable, we'll show or hide the form so we can say if there is no Auth token.

00:51:02.880 --> 00:51:07.706
In that case, we want to render or return the Auth component.

00:51:08.400 --> 00:51:11.172
so we're gonna hide everything we've done so far.

00:51:11.599 --> 00:51:13.799
If we're still not logged in.

00:51:14.239 --> 00:51:25.119
now that we have this, let's actually go to our components, create a new file called Auth.jsx and let's not forget to export it from here.

00:51:25.583 --> 00:51:32.207
That's going to be off Great inside of that off it's going to be similar situation.

00:51:32.575 --> 00:51:37.257
As with most components, we're going to use the Rafce alongside React.

00:51:37.634 --> 00:51:45.371
We're also going to need use state and we also need to import a few other things in this component.

00:51:45.577 --> 00:51:54.879
We're going to use cookies so we can say import cookies from and that's going to be universal dash cookie.

00:51:56.159 --> 00:52:14.986
Then we're also going to use Axios so we can say import Axios from Axios and I've just remembered that we haven't installed Axios so we can go under view that's going to be terminal and we can stop the current server from running by pressing Ctrl C yes and then type Npm.

00:52:15.532 --> 00:52:36.012
Install Axios Great! While that is installing, let's import sign in image from dot slash Assets Forward slash Signup dot Jpeg Great! This is installed and we can simply run Npm, start and close the terminal again.

00:52:36.425 --> 00:52:40.127
Now let's start creating the layout for our authentication.

00:52:40.639 --> 00:52:48.079
Our first Div is going to have a class name equal to Auth Underscore, Underscore Form Dash Container.

00:52:48.880 --> 00:53:19.599
Then below that we're going to have one more Div and that Div is going to have a class name equal to Auth Underscore Underscore Form Dash Container Underscore Fields We're going to have one more container inside of that and this Div is going to have a class name equal to Auth Underscore Underscore Form Dash Container Underscore Fields Dash Content I know these class names are getting long, but this is how you use the Bim methodology.

00:53:19.972 --> 00:53:30.622
Now inside of there, we're gonna have a P tag and this P tag is simply going to say sign up or sign in So we need to have a variable to know.

00:53:30.880 --> 00:53:33.679
Are we on the sign in form or on the sign up form.

00:53:34.000 --> 00:53:41.234
So let's create that variable that's going to be a state so we can say use state and select it right there.

00:53:41.679 --> 00:53:45.599
So we are going to name it is sign Up.

00:53:46.000 --> 00:53:49.311
Are we on the signup form or are we not.

00:53:49.679 --> 00:53:56.880
The initial state of the sign up is going to be set to false because we want to get to the sign in first and then in here.

00:53:57.360 --> 00:54:00.537
We can say if is sign up.

00:54:01.165 --> 00:54:04.880
In that case, show sign up.

00:54:05.838 --> 00:54:08.179
Otherwise, show sign in.

00:54:08.960 --> 00:54:10.639
Let's save it and take a look in the browser.

00:54:10.960 --> 00:54:24.579
As you can see we have this nice blue screen where it says sign in Now let's keep in mind that we'll have to add a lot of inputs, buttons and headings to this form and we want to see the changes live as we code them.

00:54:24.889 --> 00:54:29.346
For that reason, I'm going to put my browser side by side with the editor.

00:54:29.760 --> 00:54:38.613
So right now while we code something, we can see the changes live great Just below the paragraph, we're going to have a form.

00:54:39.199 --> 00:54:49.679
That form is going to have the unsubmit property which is going to be empty for now and then Inside of that form, We're going to have a lot of inputs and labels.

00:54:50.079 --> 00:54:55.079
Some inputs will be available only on the sign up so we can make that check like this.

00:54:55.679 --> 00:54:59.253
If is sign up, then show this.

00:54:59.920 --> 00:55:01.724
This is the shorthand method for the ternary operator.

00:55:02.090 --> 00:55:08.195
You use the ternary if you have two things that you want to show but you simply say is sign up and then end end.

00:55:08.453 --> 00:55:15.804
If you only need to show one thing based on this condition, So what do we want to show if it is on? Sign up.

00:55:16.168 --> 00:55:34.193
Well, we want to show a Div and that div is going to have a class name equal to Auth underscore, underscore form, Dash Container Underscore Fields Dash Content underscore Input This is the longest class name so far, but it's fine.

00:55:34.570 --> 00:55:35.702
We got it done.

00:55:36.079 --> 00:55:39.386
So inside of that input, we're going to have a label.

00:55:40.000 --> 00:55:47.480
That label is going to have the Html4 property and is going to be equal to full name inside of there.

00:55:47.860 --> 00:55:51.920
We can simply say full name of course below the label.

00:55:52.159 --> 00:55:53.608
We have to have the input.

00:55:53.973 --> 00:55:58.226
So I'm going to say input and let's add a few properties.

00:55:58.639 --> 00:56:15.180
First, the name is going to be set to full name, then the type is going to be equal to text, then the placeholder can simply say full name and finally we need the on change property on change.

00:56:15.480 --> 00:56:24.159
We're going to call a specific function called handle Change and this handle change is going to handle the change for all of the inputs that we have.

00:56:25.119 --> 00:56:28.318
Also, let's make it required great.

00:56:28.679 --> 00:56:29.759
So this is it.

00:56:30.119 --> 00:56:30.839
Let's save it.

00:56:31.199 --> 00:56:32.250
Of course we have an error.

00:56:32.460 --> 00:56:33.981
We cannot have an empty on submit.

00:56:34.257 --> 00:56:37.919
So for now I'm going to put a callback function inside of there.

00:56:38.480 --> 00:56:50.228
And of course we also have to declare the handle change so we can see const handle change is equal to and for now we're going to leave it as a blank callback function.

00:56:50.719 --> 00:56:55.175
Okay, we cannot yet see this because we are on the sign in form and not sign up.

00:56:55.440 --> 00:56:59.466
So let's manually switch this to true and there we go.

00:56:59.715 --> 00:57:01.559
Full Name with the full name input.

00:57:02.159 --> 00:57:08.799
Of course we don't want to create all of the fields by hand, so let's simply copy this div and paste it below.

00:57:09.358 --> 00:57:26.139
The label is going to say username this time and we can say Html4 Username Now of course the name of the input is going to be username, the type is going to be text and then in here we can just say username and that's about it.

00:57:26.464 --> 00:57:30.640
We have the input for the username as you can see right here.

00:57:31.280 --> 00:57:52.826
Now you might be wondering why is this not inside of the Is signup block And that is because, well, we need the username both When we're signing up for the first time and every time that we sign in, the user needs to enter the username now below the username, we're going to have one more field and this one is going to be inside of the Is signup block.

00:57:53.048 --> 00:57:56.480
So I'm going to copy this entire block and simply paste it below.

00:57:58.400 --> 00:57:59.008
There we go.

00:57:59.311 --> 00:58:04.239
This one is going to be a phone number so we can say phone number here.

00:58:05.679 --> 00:58:20.296
Html4 phone number, name, phone number, type, text, placeholder is going to be phone number as well and we're done with one more input field below that one.

00:58:20.605 --> 00:58:26.639
We're going to copy everything and this one is going to be avatar url.

00:58:28.000 --> 00:58:32.959
This also needs to be shown only on the sign up because we need to choose our image only once.

00:58:33.519 --> 00:58:36.586
So that's avatar url like this.

00:58:37.199 --> 00:58:42.960
Make sure the name contains the url all uppercased and then in here as a placeholder.

00:58:43.280 --> 00:58:50.559
We can also say avatar url Great! Below that we're going to have our password this time.

00:58:50.880 --> 00:58:56.847
We won't show it only on the sign up so I'm going to copy this div and paste it right here.

00:58:57.280 --> 00:59:11.358
We can rename this and this to password Html4 Password name is also going to be password and the type is going to be of course password.

00:59:14.079 --> 00:59:14.513
That's it.

00:59:14.947 --> 00:59:16.684
Our password field showed up.

00:59:17.119 --> 00:59:21.893
Now we want to have just one more field but this is going to be when we want to repeat the password.

00:59:22.400 --> 00:59:25.519
So I'm gonna paste this entire part right there.

00:59:25.839 --> 00:59:34.199
We need to copy the Is signup block because we only want to show the confirm password on the account creation Like this.

00:59:35.039 --> 00:59:42.798
I know the indentation is not perfect, but let's try to get it done and this here is going to be Confirm Password.

00:59:44.000 --> 01:00:04.753
I can put that here as well, Confirm Password and the name in the Html4 for that are going to be Confirm Password and again make sure that the name in all of these inputs is correct because the way we'll be managing data requires us to have a specific name right here.

01:00:05.119 --> 01:00:05.416
That's great.

01:00:05.713 --> 01:00:08.880
We have one more field which is Confirm Password.

01:00:09.440 --> 01:00:15.838
Finally below that we're going to have one more div and that's going to be outside of the form.

01:00:16.141 --> 01:00:20.299
So I'm going to put it outside and finally indent it properly.

01:00:20.880 --> 01:00:39.039
Now I can even make the text a bit bigger and this div is going to have a class name equal to Auth Underscore Underscore Form Dash Container Underscore Fields dash Account So in here we can simply add a paragraph tag.

01:00:39.342 --> 01:00:48.359
In this paragraph we want to show a different message depending on if user is sign up or if not so we can say if is sign up.

01:00:48.880 --> 01:01:32.639
In that case we can display a message something like this is sign up and that's going to be already have an account question mark but if it's not then we can say don't have an account question mark We need to be able to switch between the modes and then we're going to have a span element inside of that p element and it's going to have the on click property which is going to say switch mode in there we can again look at the is signup variable and if we are on the sign up then we can show sign in.

01:01:34.000 --> 01:01:36.880
Otherwise we can show sign up.

01:01:37.760 --> 01:01:39.747
Let's save it and take a look.

01:01:40.079 --> 01:01:44.773
Of course our switch mode is not defined so let's define the switch mode.

01:01:45.199 --> 01:01:48.426
That's going to be fairly simple at the top.

01:01:48.880 --> 01:01:59.639
Let's define the switch Mode function by saying const switch mode is equal to a function and then in there we can set is sign up to be not is sign up.

01:01:59.903 --> 01:02:07.568
But the better way to do that is to provide a callback function where we get the previous value of a state field.

01:02:08.175 --> 01:02:14.969
So previous is sign up and we simply want to return a negation of that so that's going to be not.

01:02:15.199 --> 01:02:16.639
Previous is sign Up.

01:02:17.119 --> 01:02:23.184
This is the correct way to do it in React when you want to change the state depending on the previous state.

01:02:23.760 --> 01:02:24.192
There we go.

01:02:24.408 --> 01:02:26.542
we have the sign up form and the entire thing.

01:02:26.853 --> 01:02:31.839
Now if I click sign in, it switches to the sign in which is a lot simpler.

01:02:32.798 --> 01:02:36.419
Finally, we also want to display an image next to our form.

01:02:36.798 --> 01:02:45.199
So we are going to go above the Div that's the last one so above here and we want to create one more div inside of here.

01:02:46.400 --> 01:03:07.851
That div is going to have a class name equal to Auth, underscore, underscore form, dash, container, underscore image, and then in there we can simply display that image that's going to be Img and then source is going to be equal to sign in image which we declared above.

01:03:08.194 --> 01:03:24.052
We can also have the alternative tag which is going to say sign in Great! As you can see, it doesn't look that good on smaller devices, but if we actually switch to mobile, you can see that it gets pushed to the top and it seems like a banner.

01:03:24.381 --> 01:03:30.719
But then if we go to the full screen you can see it looks great right here as well.

01:03:31.838 --> 01:03:35.679
So the actual layout for our login is now done.

01:03:35.946 --> 01:03:44.585
Now we have to handle the states of these fields and then send them over to the backend which is going to create an account or log in The user.

01:03:45.039 --> 01:03:55.039
Then our user is going to be logged in onto the dashboard we've created previously and we'll be able to show all of his channel previews, direct messages, and everything else.

01:03:55.679 --> 01:03:58.559
First, let's handle the data from all the inputs.

01:03:58.932 --> 01:04:01.812
That's what the handle change function is for.

01:04:02.318 --> 01:04:05.199
But of course we first have to create a state field.

01:04:05.920 --> 01:04:08.000
Let's create a new state field called form.

01:04:08.880 --> 01:04:16.639
So we're going to have form and set form which is going to be equal to use state And there we want to show something.

01:04:16.879 --> 01:04:19.119
At the start, we want to have an initial state.

01:04:20.318 --> 01:04:28.400
so at the top we can define that initial state as an object and that object is going to have a few properties.

01:04:28.731 --> 01:04:32.742
It's going to have a full name which is going to be equal to an empty string.

01:04:33.085 --> 01:04:42.000
We can also add the username equal to an empty string, there's a password which is equal to an empty string, and all of the fields we've had.

01:04:42.248 --> 01:04:44.239
We have to reset them to an empty string.

01:04:44.449 --> 01:04:49.484
so it's going to be a phone number and then finally the avatar url.

01:04:50.079 --> 01:04:55.291
These six fields form our initial state and we can put them right here.

01:04:55.679 --> 01:05:01.505
So now we have our form and set form and finally let's add our handle change.

01:05:02.079 --> 01:05:12.893
So what do we want to do on the change? Well, we get an event with the text of the input we're changing and then we want to call the set form.

01:05:13.519 --> 01:05:19.559
So remember, a form is not just a single text field, it is actually an object.

01:05:19.979 --> 01:05:26.764
So we have to put an object there and we have to spread all of the other items from the form.

01:05:27.102 --> 01:05:33.648
So we spread all the other inputs because we're only changing one and we want to keep all the other ones.

01:05:34.000 --> 01:05:39.519
But then how do we change a specific one? Well, we're gonna get E Dot Target dot name.

01:05:39.800 --> 01:05:53.119
That's the name of the input we're changing and then the value for that same input is under the event.target.value And why are we using square brackets right there? Because this here is a syntax error.

01:05:53.838 --> 01:06:10.905
so you have to wrap the name of this specific object key in the square brackets and then set that equal to E.target.value That's going to update our state field and we can even take a look at that by simply doing a console log which is going to say form.

01:06:11.261 --> 01:06:12.683
So let's check it out.

01:06:13.039 --> 01:06:17.760
There's my form and I'll try typing something Smith.

01:06:18.880 --> 01:06:19.395
There we go.

01:06:19.653 --> 01:06:23.199
As you can see, it's keeping track of everything that we write.

01:06:23.599 --> 01:06:32.960
The username can look like this and as you can see now, it kept the full name but it keeps adding to the username and it's always going to be one letter late.

01:06:33.234 --> 01:06:38.666
But don't worry about that because our user still has to click the actual sign in button.

01:06:39.119 --> 01:06:45.039
Now that I've mentioned that, I'm noticing that we are actually missing our sign in button, So let's add it right away.

01:06:45.920 --> 01:06:50.389
That button is going to be right here as the last thing in our form.

01:06:50.739 --> 01:06:53.599
so still inside of our form, we're going to have a button.

01:06:54.559 --> 01:07:14.079
More specifically, it's going to be a Div with a class name which is going to be equal to Auth Underscore underscore form, dash, Container Underscore Fields Dash Content Underscore Button a long one And then inside of that div, we're gonna have a button.

01:07:15.280 --> 01:07:20.701
That button is going to check if we're on the sign up or on the sign in.

01:07:21.039 --> 01:07:27.639
If we're on the sign up, we're simply going to say sign up Else we're going to say sign in.

01:07:28.059 --> 01:07:29.159
Let's save it.

01:07:29.838 --> 01:07:34.798
Okay, now we have the button and that button is going to trigger the actual submit.

01:07:35.148 --> 01:07:38.319
So if you scroll up, you'll notice that right here.

01:07:38.679 --> 01:07:42.239
We have our on submit and we have to create a function for that.

01:07:42.759 --> 01:07:46.279
So let's create a handle submit function.

01:07:47.199 --> 01:07:49.066
We can add it right here.

01:07:49.440 --> 01:07:51.199
Const: Handle Submit.

01:07:52.079 --> 01:07:58.560
It's going to accept the event and in here we have to handle the logic of logging in or registering.

01:07:59.280 --> 01:08:09.416
Usually when you submit a form, you need to add e dot prevent default because it's going to reload the page and in react We don't want that.

01:08:09.838 --> 01:08:11.119
Okay, now we have it.

01:08:11.439 --> 01:08:17.359
Let's also console lock the form to see if we're getting the right thing passed to the back end.

01:08:17.600 --> 01:08:20.351
We can remove the console from the handle change.

01:08:20.798 --> 01:08:23.062
Let's save it and take a look.

01:08:23.439 --> 01:08:24.879
Okay, let's enter our name.

01:08:25.239 --> 01:08:25.959
Let's do Dr.

01:08:26.319 --> 01:08:27.238
Smith again.

01:08:28.158 --> 01:08:28.158
Dr.

01:08:28.519 --> 01:08:35.378
Smith as the username one two three one two three one two three in here we can enter his avatar image.

01:08:35.759 --> 01:08:39.299
I just went on Google and I copied the image address.

01:08:39.639 --> 01:08:45.599
so we have a doctor image address here and then finally let's enter and confirm the password.

01:08:45.999 --> 01:08:49.979
I'm going to click, sign up and look at that.

01:08:50.399 --> 01:08:52.576
Here is our data object.

01:08:53.119 --> 01:08:59.530
This is exactly what we want to pass over to the back end so that we can create a new stream account.

01:08:59.953 --> 01:09:02.186
Let's do that right away.

01:09:02.880 --> 01:09:08.194
Of course, to be able to make requests from the front to the back end, we have to create the backend part.

01:09:08.502 --> 01:09:14.175
so let's close all the files, collapse it, and go inside of our server directory.

01:09:14.719 --> 01:09:18.659
Inside of there, we can create a new index.js file.

01:09:19.679 --> 01:09:23.259
This is going to be the starting point for our entire server.

01:09:23.759 --> 01:09:31.233
We can also open the terminal by going to view terminal and we can split the terminal in half by clicking this button.

01:09:31.679 --> 01:09:37.719
Now this one is running the front end and with this one, we can Cd into the server part.

01:09:38.798 --> 01:09:44.386
Let's clear the console and we're going to run Mpm Init Dash Y.

01:09:45.039 --> 01:09:50.746
This is going to initialize Amt package.json There we go with that.

01:09:51.092 --> 01:09:55.759
We can now install all the necessary dependencies and add corresponding scripts.

01:09:56.719 --> 01:10:02.039
So let's first start by installing all the necessary dependencies to do that.

01:10:02.459 --> 01:10:08.800
We can run Npm install, make sure that you're in the server part of our project and we're going to need bcrypt.

01:10:10.399 --> 01:10:15.960
We're going to use that for hashing passwords also crypto to create a random cryptographic string.

01:10:16.880 --> 01:10:22.279
Then we're going to need dot env for environmental variables also express.

01:10:23.279 --> 01:10:26.789
Also get stream and stream dash chat.

01:10:27.239 --> 01:10:34.180
We are also going to use Nodemon and finally Twilio for sending live Sms messages.

01:10:34.880 --> 01:10:39.626
So let's press enter and we're going to wait for this to be installed.

01:10:40.079 --> 01:10:43.519
Now that our packages have installed, we can add some new scripts.

01:10:43.839 --> 01:10:48.308
So I'm going to delete this test script and I'm going to add a start script.

01:10:48.650 --> 01:11:14.186
make sure that everything is in double quoted strings because we are working with Json and then right here we can say Node Index.js This is a command to start our server below that I'm going to add a Dev command which is going to run Nodemon Index.js Nodemon is a package that reloads your application whenever you change the code, so we need that for development.

01:11:14.560 --> 01:11:16.560
So as you can see now we have the scripts.

01:11:16.866 --> 01:11:23.119
We also have all the dependencies and let's create the basic Express Node.js Server.

01:11:23.920 --> 01:11:31.119
So inside of Index.js we can say const Express is equal to require and then express.

01:11:31.439 --> 01:11:48.032
We also need course so we can say const course is equal to require and then that's going to be course that's used for cross origin requests and I just remembered that we didn't install that so we can say Mpm install and then simply paste course.

01:11:48.560 --> 01:11:58.284
Okay, now that we have Express here, let's create the instance of that express application by saying const app is equal to Express and then we call it.

01:11:58.719 --> 01:12:16.819
We also need to specify the port for our backend so we can say port is equal to process.env.port or 5000. Also, we're going to use a lot of environment variables so we can say require and then dot Env and then dot config.

01:12:17.119 --> 01:12:22.479
This is going to allow us to call the environment variables right inside of our node application.

01:12:23.600 --> 01:12:28.319
Now let's set up our middleware by saying App.use inside of here.

01:12:28.639 --> 01:12:34.732
We can use that course if we call it as a function that's going to allow us to make cross-origin requests.

01:12:35.198 --> 01:12:40.479
We need to set one more middleware which is going to be express.json and you call it as a function.

01:12:41.920 --> 01:12:52.920
This will allow us to pass Json payloads from the front end to the backend and finally app.use and inside of here we're going to say express dot url encoded.

01:12:53.340 --> 01:12:58.960
This is a built in middleware function in express so it's going to be url encoded.

01:12:59.680 --> 01:13:01.119
Like so great.

01:13:02.158 --> 01:13:16.319
Finally, we are ready to create our first route and that's going to be app.get and it's just going to be a root route So we can say just forward slash create a callback function.

01:13:17.039 --> 01:13:21.039
That callback function is going to receive request and response as parameters.

01:13:22.479 --> 01:13:31.946
We can use the res.send method to simply respond with something like hello World just so we know that our backend server is running.

01:13:32.640 --> 01:13:38.257
Of course, for our server to be running, we need to run it on a specific port and we need to listen for it.

01:13:38.533 --> 01:13:43.819
So let's say app.listen and that's going to be on port port.

01:13:44.238 --> 01:13:55.457
We get a callback function and there we can simply say console.log and say something like server running on port and then we can say port right there.

01:13:55.768 --> 01:13:56.079
Of course.

01:13:56.284 --> 01:14:02.880
For this to work, we have to use backticks so I'm going to put them right here and here and we have to close the last parentheses.

01:14:04.158 --> 01:14:04.899
There we go.

01:14:05.269 --> 01:14:09.920
This is a minimal instance of an express application, so let's run it.

01:14:10.069 --> 01:14:16.159
I'm going to run it in the development mode by saying Npm run Dev Nodemon Started their application.

01:14:16.560 --> 01:14:23.920
on Localhost 5000. So if you open up Localhost 5000 in the browser, you should be able to see Hello World.

01:14:24.880 --> 01:14:28.799
That means that we successfully created and ran our server.

01:14:29.279 --> 01:14:33.039
Now let's add routes for our sign in and register.

01:14:34.158 --> 01:14:36.760
We can do that by requiring routes at the top.

01:14:37.199 --> 01:14:48.879
Const: Aud routes is equal to require and then that's going to be dot slash routes and then forward slash Auth.js Of course we haven't yet created that.

01:14:49.159 --> 01:15:31.920
So let's go to our server and let's create a folder called Routes Inside of there, we can create a new file called Auth.js There, we need to require Express So we can say const Express is equal to Require Express and we need to get a router from that Express by saying const router is equal to Express.router and we call it Finally, We're going to create two different routes: Router.post Both of these routes are going to be post routes because we have to send the data from the front end to the back end and only with the post routes can you send a payload.

01:15:32.560 --> 01:15:40.453
The first one is going to be to forward slash sign up and the second one is going to be to the forward slash login.

01:15:41.279 --> 01:15:45.371
Of course we want to have a function that's going to happen on each one of these routes.

01:15:45.702 --> 01:15:49.220
So we're going to create controllers inside of the server.

01:15:49.440 --> 01:15:57.903
I'm going to create a new folder called Controllers and inside of there, I'm going to create the Auth Controllers.

01:15:58.735 --> 01:16:12.759
So Auth.js Now inside of there we can create the actual login function by saying Cons: Login is equal to a function like this and also we can create the sign up function like this.

01:16:13.359 --> 01:16:18.640
Of course, these functions don't do anything yet, but we're just creating them so that we can export them right here.

01:16:19.520 --> 01:16:21.028
and with modules, we do.

01:16:21.404 --> 01:16:28.248
Module Dot Exports is equal to an object and there we have the sign up and also the login.

01:16:28.640 --> 01:16:34.190
So now we're exporting the functionalities which are going to happen once we go to a specific route.

01:16:34.560 --> 01:16:45.039
So inside of here, we actually have to import them And we can do that by saying const, sign Up and Login we're getting that from.

01:16:45.412 --> 01:17:09.527
Which means equal to require dot dot slash controllers slash odd dot Js And what do we do on the sign up post, We call the sign up on the login post, We call the login and we need to export our router, which we can do by saying module.exports is equal to router.

01:17:10.399 --> 01:17:17.198
Now we can use this router inside of our index.js which means that these routes are going to be added to our whole server.

01:17:17.698 --> 01:17:25.279
We can do that by saying app.use and then we can specify the start of the url which is going to be forward slash auth.

01:17:26.238 --> 01:17:30.560
And what do we show on the forward slash auth Well, we show the Auth.

01:17:30.960 --> 01:17:33.702
routes which we imported from the routes folder.

01:17:34.091 --> 01:17:44.880
That part is now done and now the only thing we have to do is actually implement the logic of receiving the data from the front end and finally creating or logging in the user.

01:17:46.719 --> 01:17:54.000
A reasonable first step would be to create the sign up first because we have to have the users to be able to log them in.

01:17:54.719 --> 01:17:59.840
So let's try with the signup, we're going to have a try and catch block right there.

01:18:00.719 --> 01:18:03.061
If something goes right, we're going to be inside of here.

01:18:03.336 --> 01:18:06.697
If something goes wrong, well we're inside of the catch.

01:18:07.119 --> 01:18:21.386
If we're there, we can simply run console.log error and also res dot status 500 dot json and then we're simply going to send back the message which is going to be the error.

01:18:22.319 --> 01:18:29.999
You might be wondering where is this rest coming from? Well, every single controller is going to have the rec and the rest functions.

01:18:30.640 --> 01:18:34.759
Our rack is going to contain the information what we're sending from the front end.

01:18:35.359 --> 01:18:39.439
Now I'm going to copy this part to the login as well because that part is the same.

01:18:39.799 --> 01:18:43.520
and let's start implementing the sign up for the sign up.

01:18:43.760 --> 01:19:03.920
What things do we need to get from our request? that body, or more specifically from the front end? Well, we can destructure it because we are getting everything from direct.body So what do we need? Well, we need? a full name to save it to the database, also, the username, the password, and finally the phone number.

01:19:05.198 --> 01:19:10.479
Now that we have that information, let's create a random user Id for each new user.

01:19:10.888 --> 01:19:15.866
We can do that by saying const user Id is equal to crypto.

01:19:16.292 --> 01:19:19.840
That's going to be a package that we need to import at the top.

01:19:20.231 --> 01:19:30.749
so just at the top above the sign up, let's require the crypto package or let's also require all the packages that we're going to use in this file.

01:19:31.039 --> 01:19:39.760
So that's going to be const connect that's coming from or more specifically, require get stream.

01:19:41.039 --> 01:19:47.720
Then Also, const, bcrypt is equal to require and that's going to be bcrypt.

01:19:48.640 --> 01:19:50.800
We also need an instance of a stream chat.

01:19:51.222 --> 01:19:58.238
so we can say const stream chat is equal to require stream dash chat.

01:19:59.600 --> 01:20:04.800
And finally, Cons: Crypto is equal to require crypto.

01:20:06.319 --> 01:20:06.590
That's it.

01:20:06.859 --> 01:20:08.479
Now we have everything that we need.

01:20:09.279 --> 01:20:12.346
Let's scroll down and let's implement the user id.

01:20:12.880 --> 01:20:25.919
So to create a random crypto string, we can say crypto dot, random bytes and let's do something like 16 and create a hexadecimal string out of it.

01:20:26.159 --> 01:20:30.026
This is going to create a random sequence of 16 hexadecimal digits.

01:20:30.573 --> 01:20:32.619
Now let's make a connection to stream.

01:20:32.920 --> 01:20:43.750
We can say const server client is equal to connect and now we have to use that connect from the get stream to connect to the server.

01:20:44.079 --> 01:20:46.179
but we need to pass a few things.

01:20:46.479 --> 01:20:48.026
We need to pass the api key.

01:20:48.284 --> 01:20:57.253
So let's specify it here: Api Underscore Key Also, Api Underscore Secret and finally App Underscore Id.

01:20:58.000 --> 01:21:02.159
All of these things should be secret and you shouldn't share them with anyone.

01:21:02.479 --> 01:21:04.960
That's why we're gonna use environment variables.

01:21:06.238 --> 01:21:19.896
So just at the top, let's say Const Api Underscore key is equal to process Dot Env that stream underscore Api Underscore Key I'm gonna duplicate this two times.

01:21:20.228 --> 01:21:28.764
The second thing is going to be Api Underscore secret and in here we can say Stream Api Secret.

01:21:29.279 --> 01:21:36.186
Then we're going to have the App Underscore Id and that's going to be Stream App Underscore Id.

01:21:36.639 --> 01:21:45.600
So Stream Underscore App Underscore Id Great! Now where do we find these values? Well, you can find them in your stream dashboard.

01:21:46.144 --> 01:21:50.262
Let me show you right here on your stream dashboard.

01:21:50.651 --> 01:21:55.549
You have your profile, you go to chats, and then finally you go to Overview.

01:21:55.939 --> 01:21:58.719
There at the top, you'll be able to find your app Id.

01:21:58.989 --> 01:22:01.479
So that's the first thing that you can copy.

01:22:02.079 --> 01:22:09.840
Now we can create a new file inside of our server called Dot Env and there we can add our app Id.

01:22:10.159 --> 01:22:17.279
So I'm going to copy the name stream App Id and paste it here and add the equal sign in between.

01:22:17.805 --> 01:22:20.434
So Stream App Id like this.

01:22:20.960 --> 01:22:29.247
Also, we can copy those, paste them and let's go back to the dashboard to find the values for the secret and for the key.

01:22:29.760 --> 01:22:35.920
Now, if you scroll a bit down, you should be able to see app access Keys Here is a key.

01:22:36.319 --> 01:22:39.231
let's copy it, paste it right here.

01:22:39.760 --> 01:22:40.839
And finally a secret.

01:22:41.199 --> 01:22:44.839
I'm going to copy it and paste it right here.

01:22:45.279 --> 01:22:48.199
Now we have all of the necessary environment variables.

01:22:49.119 --> 01:22:58.591
Let's go back to our controllers and now these values api, key secret, and Id are going to be populated straight from our environment variables.

01:22:59.103 --> 01:23:04.119
Therefore, we can use them right here to connect to our server client.

01:23:05.119 --> 01:23:09.039
We are going to use that server client to create a new user token.

01:23:09.439 --> 01:23:11.919
So let's create a password first.

01:23:12.479 --> 01:23:14.537
Const: and that's going to be hashed.

01:23:14.880 --> 01:23:26.739
Password is going to be equal to a weight bcrypt and then we call the dot hash method on the bcrypt and we pass in the password.

01:23:27.119 --> 01:23:29.640
And finally we can pass 10 as salt.

01:23:30.000 --> 01:23:35.412
Basically, how much is it going to encrypt it? This number specifies the level of encryption.

01:23:36.000 --> 01:23:48.943
Great! I've noticed that I didn't specify my function as Async, so let's add it as Async because we're using a weight in here and this line is turning our plain text password to the hashed password.

01:23:49.520 --> 01:24:04.906
Finally, let's create a token for our user by saying Cons: token is equal to server client dot, create user token and then in there we can pass the user Id.

01:24:05.439 --> 01:24:06.683
Now we have everything we need.

01:24:06.932 --> 01:24:12.742
We have a phone number, username, full name token, everything ready to create a user.

01:24:13.131 --> 01:24:21.466
So let's return that data to the front end, rest that status is equal to 200 dot json, and then an object.

01:24:21.741 --> 01:24:35.248
We want to pass the token, full name, username, user id, hashed password, and finally we also want to pass the phone number.

01:24:35.840 --> 01:24:45.092
We could get these values straight from the front end, but let's get them from the back end as it's more secure that way to be sure that this is the actual user we're creating.

01:24:45.679 --> 01:24:49.412
And while we're here, let's also create our login function.

01:24:50.000 --> 01:24:52.590
It's also going to be an Async function.

01:24:52.960 --> 01:25:04.759
We also want to get some data from the front end const, and in this case we just want to get the username and the password that part is coming from.

01:25:05.249 --> 01:25:07.050
Wreck that body and Rig.

01:25:07.382 --> 01:25:14.328
That body is getting populated as we pass data from the front end from our form which we created previously to the back end.

01:25:14.613 --> 01:25:19.340
We also want to connect to the client so we can use this server client connect.

01:25:19.639 --> 01:25:21.439
It's going to be the same thing.

01:25:21.794 --> 01:25:27.280
I'm going to paste it here and we also want to create a new instance of a stream chat.

01:25:27.600 --> 01:25:41.453
We can say const client is equal to stream chat, dot, get instance, and then in there we pass the api underscore key and api underscore secret.

01:25:42.079 --> 01:26:06.920
We need to use that because we want to query all the users from the database that match this specific username So we can say const They structure it to get the users and then say equal to await Client dot query users and then only the users that match the name which is equal to username.

01:26:07.520 --> 01:26:43.158
So one more time this time we're not creating the user, we are taking the username and we want to query all the users from the database to see if anyone matches if there are no users so if no users.length then in that case we can return rest.status Let's do 400 dot json and the message is going to be something like user not found If we go over this point, that means that our user does exist and we have to decrypt the password and see if it matches the one that the user created the account with.

01:26:43.418 --> 01:27:09.198
So we can say cons Success is equal to await bcrypt.compair We pass in the password and we take the old user's password by saying users 0 dot hashed password Again, every user is going to have that hash password variable because remember when creating the user, we actually create the hashed version of his password.

01:27:10.238 --> 01:27:34.279
We are not keeping it in plain text and that's why we gotta do it Now that we have that, we also want to create a new user token by saying Cons: Token is equal to server Client dot create user token and this time the token has to be created using the same existing Id So we can say user 0 dot Id.

01:27:34.719 --> 01:27:38.942
We are no longer passing just a regular user id which we just created.

01:27:39.226 --> 01:27:48.559
We want to pass that specific user's id and now that we have everything, we have the token if our action is successful.

01:27:49.000 --> 01:28:00.586
So if this is success in that case, we want to finally send all the data back so we can say rest that status is equal to 200 and then dot Json.

01:28:00.995 --> 01:28:04.000
And here pass the data we want to send.

01:28:04.319 --> 01:28:06.186
We want to pass the token.

01:28:06.560 --> 01:28:17.000
We also want to pass the full name which is going to be equal to users 0 dot full name Then we want to pass the user name.

01:28:17.359 --> 01:28:24.399
Finally, we want to pass the user id by saying users 0 and then dot Id.

01:28:25.039 --> 01:28:27.097
Now we have everything we need.

01:28:27.508 --> 01:28:43.239
Finally, if we had a failure here, we can say rest.status That's going to be 500 dot json and we can simply return a message in an object which is going to say incorrect password like this.

01:28:44.079 --> 01:28:44.380
That's it.

01:28:44.680 --> 01:28:46.479
I know that this hasn't been easy.

01:28:46.986 --> 01:29:06.159
We are creating users creating different user ids, hashing passwords, sending the data back to the front end, and then for the logged in users, we are querying that user from the database, again, decrypting that password, comparing it, and then finally creating the new token and sending it back.

01:29:06.519 --> 01:29:10.986
It's definitely not easy, but now we have our back end done.

01:29:11.439 --> 01:29:23.688
Now we can close all of these files and then go back to the client side more specifically, in components Auth, and then from here into handle Submit: Remember this form data.

01:29:23.972 --> 01:29:27.279
We want to pass that form data back to our back end.

01:29:27.599 --> 01:29:28.999
Let's do that right away.

01:29:29.439 --> 01:29:34.095
Okay, instead of console logging the form, let's actually get the data out of it.

01:29:34.367 --> 01:29:38.466
We can say const and then destructure some data from the form.

01:29:38.960 --> 01:29:49.840
In this case, we are going to need the full name, username, password, phone number, and then finally the avatar url.

01:29:50.136 --> 01:29:54.847
And all of this is coming from not E Target, it's coming from form.

01:29:55.359 --> 01:30:10.399
Then we need to specify the url we'll be making a request to so we can say conturl is equal to and that's going to be Http Colon, Forward slash forward slash localhost Collin 5000.

01:30:11.520 --> 01:30:11.859
That's it.

01:30:12.199 --> 01:30:16.960
This is our url, but don't forget it's going to be to forward slash Auth.

01:30:17.920 --> 01:30:22.525
Now that we have the data and we know our url, let's make an Axios call.

01:30:22.960 --> 01:30:27.119
I'm going to turn this function into an Async function so that we can use Async away.

01:30:27.460 --> 01:30:29.840
And let's use Axios to make that request.

01:30:30.210 --> 01:30:41.697
We can say const, that's going to be data and that is coming from await Axios.post we post to a specific url.

01:30:42.053 --> 01:30:46.659
so I'm going to say url but it's not it.

01:30:46.959 --> 01:30:48.158
We have the forward slash.

01:30:48.479 --> 01:31:02.213
odd, but then it has to be either sign up or log in and how are we going to know which one is which? Well, we can say forward slash and then inside of here we can see are we on the sign up.

01:31:02.826 --> 01:31:04.751
So if it is, sign up.

01:31:05.079 --> 01:31:09.239
In that case, we are going to simply show sign up.

01:31:09.920 --> 01:31:18.559
But if it's not, sign up, we are going to go to sign in so we can have this logical block right inside of our string right here.

01:31:19.279 --> 01:31:23.972
And finally, the second thing that we have to pass into this function is going to be the object.

01:31:24.257 --> 01:31:25.110
with all the data.

01:31:25.394 --> 01:31:37.819
We can pass the username also the password, full name, and finally phone number, and the avatar url.

01:31:38.399 --> 01:31:42.870
Great! There are a lot of things we're passing, but we should be fine from that.

01:31:43.180 --> 01:31:44.420
We are getting the data.

01:31:44.729 --> 01:31:47.478
That's the data we're passing back from the front end.

01:31:48.238 --> 01:31:55.413
Now that we're passing the right url and we're passing all the necessary data, we'll also be getting something back from that data.

01:31:55.840 --> 01:31:58.920
So let's immediately destructure some things out of it.

01:31:59.279 --> 01:32:06.960
We are going to the structure, the token, also, the user id, and finally the hashed password.

01:32:08.639 --> 01:32:14.360
Great! Now let's use those values to add them to the browser cookies.

01:32:14.880 --> 01:32:18.020
So let's create an instance of our cookies at the top.

01:32:18.319 --> 01:32:25.000
I'm going to say const cookies is equal to new and then we call cookies.

01:32:25.439 --> 01:32:35.849
Great, right? Here We can use those cookies by saying cookies dot set and then for example, let's first set the token right here.

01:32:36.179 --> 01:32:40.590
I'm gonna say token and then pass the actual token value.

01:32:41.198 --> 01:32:43.439
Now I'm going to repeat this three more times.

01:32:44.639 --> 01:32:49.346
and the second time instead of the token, it's going to be user name.

01:32:49.840 --> 01:32:52.479
For the third time it's going to be the full name.

01:32:52.719 --> 01:33:00.365
We want to store all of this data inside of our cookies and then finally it's going to be user Id.

01:33:00.880 --> 01:33:07.572
But if we're creating the account, so if is, sign up we have some more things we might want to set.

01:33:07.857 --> 01:33:11.715
So I'm going to copy these and if it is, sign up.

01:33:11.963 --> 01:33:14.090
We also want to set the phone number.

01:33:14.536 --> 01:33:15.428
So right here.

01:33:15.874 --> 01:33:20.399
Phone Number: Also the avatar url.

01:33:21.520 --> 01:33:31.949
Make sure that all letters are uppercased and finally hashed Password: In this case, we are storing everything inside of the cookies.

01:33:32.280 --> 01:33:39.546
We might not need everything on our front end, but it's just good to know that all the data we're getting from the back end we now have it.

01:33:39.813 --> 01:33:45.493
We have the avatar url, the phone number and we'll be able to use it all across our application.

01:33:46.079 --> 01:33:49.145
Finally, once we set the cookies, we want to reload our browser.

01:33:49.448 --> 01:33:56.986
We can do that by saying window, dot, location, dot reload and we call that as a function.

01:33:57.520 --> 01:34:00.853
With that, we are completely done with our odd file.

01:34:01.359 --> 01:34:06.238
So one more time to repeat, we are going to fill in all the inputs.

01:34:06.639 --> 01:34:15.799
Then we are going to go into the handle submit function, get all the data from the form, get the url, make the request to our backend.

01:34:16.238 --> 01:34:26.479
More specifically, we're going to make a request to a different url each time depending on if we're logging in or signing up, and we're going to pass all the form data.

01:34:26.769 --> 01:34:32.639
Then we're going to get some data back from the backend and we're going to store everything into cookies.

01:34:33.198 --> 01:34:35.359
Then finally, we're going to reload our application.

01:34:36.960 --> 01:34:46.468
Why are we doing the reload? Well, if we do the location.reload we're going to reload the application and this time our Auth token should be filled.

01:34:46.845 --> 01:34:50.088
That means that we are not going to hit Auth again.

01:34:50.399 --> 01:34:57.039
We are going to go to our chat as a logged in user because now we're going to have our odd token.

01:34:57.679 --> 01:35:01.759
Okay, but right now we have this odd token set to be false.

01:35:02.039 --> 01:35:06.933
How can we actually get the data? Well, we can do that using the cookies.

01:35:07.226 --> 01:35:17.159
We can say const cookies is equal to new cookies, same thing we did before and now instead of setting the values, we are going to get them.

01:35:17.679 --> 01:35:19.578
Let's first get the odd token.

01:35:19.958 --> 01:35:28.101
I'm going to pull this up below the api key and we can simply do cookies, dot, get, and then in here.

01:35:28.524 --> 01:35:30.216
it's going to be token.

01:35:30.639 --> 01:35:35.933
Now we can see if we have that Auth token by doing if odd token.

01:35:36.479 --> 01:35:44.000
If we do have the Auth token, we want to create a user so we can say dot Connect user.

01:35:45.279 --> 01:35:49.119
If the user hasn't been created yet, it's going to create it.

01:35:49.499 --> 01:35:51.439
So Client dot, Connect user.

01:35:52.238 --> 01:35:53.976
This thing accepts an object.

01:35:54.411 --> 01:36:01.453
so let's expand it and we have to pass everything that we have right here in the cookies.

01:36:01.920 --> 01:36:08.019
So I'm going to simply copy these values and also these values.

01:36:08.719 --> 01:36:11.471
Now I'm going to go back and simply paste them.

01:36:11.743 --> 01:36:14.239
As you can see, we have all of these cookies.

01:36:14.559 --> 01:36:19.399
Of course this is not in the right format so what you can do is click here.

01:36:20.000 --> 01:36:25.739
Then you can move across by holding Ctrl and using arrow right and arrow left.

01:36:26.150 --> 01:36:31.583
By doing that, we can now delete or reset this set to simply get.

01:36:32.158 --> 01:36:41.519
Also, we are not setting anything so we can delete these values by simply moving to the end of each line and then holding control and pressing backspace.

01:36:42.158 --> 01:36:46.999
As you can see, now, we're simply getting all of the values, but we're not done yet.

01:36:47.309 --> 01:36:56.829
Of course we're in an object, so we have to have the key go at the end of the string, hold Ctrl and shift and press arrow left.

01:36:57.359 --> 01:37:11.199
That's going to allow you to copy each word Now press Ctrl C and then a few more times Ctrl left arrow go to the start of the line and press Ctrl V and finally a colon.

01:37:11.840 --> 01:37:18.826
Once you do it one more time, go to the end of the line and turn all semicolons to simply columns.

01:37:19.520 --> 01:37:28.759
And just like that, we've used some shortcut magic to format all of our data from setting the cookies to getting the cookies and using them for the connect user call.

01:37:29.039 --> 01:37:40.013
Now if this was a bit too much for you, or if you followed along, but you would like to learn more cool shortcuts, let me know in the comments down below to create a whole shortcuts video.

01:37:40.479 --> 01:37:46.359
If this was too hard for you to follow along, definitely make sure that you have everything the same as we have right now.

01:37:46.639 --> 01:37:52.799
You need to have the token, username, full name, and all these details being fetched from the cookies.

01:37:53.359 --> 01:37:55.320
We have to make just a few changes.

01:37:55.600 --> 01:37:57.626
The user Id cannot be user id.

01:37:57.963 --> 01:37:59.491
it simply has to be Id.

01:37:59.775 --> 01:38:05.245
That's how it is in the client.connect user, then instead of the username.

01:38:05.576 --> 01:38:08.914
This thing here is just going to be name.

01:38:09.359 --> 01:38:11.692
After that, we have full name.

01:38:12.158 --> 01:38:17.382
After that, instead of the avatar url, we're going to call this simply Image.

01:38:17.840 --> 01:38:22.479
Then we're going to have the hashed password, and finally, the phone number.

01:38:23.039 --> 01:38:28.591
We won't need the token here because we're already getting it at the top so you can remove that line.

01:38:28.960 --> 01:38:35.680
Now that we're done with this, make sure that you have everything the same just in case so that we don't have any errors moving forward.

01:38:36.479 --> 01:38:46.520
Finally, this connect user function accepts a second parameter which is odd token that same token we had right here.

01:38:46.960 --> 01:38:47.250
That's it.

01:38:47.539 --> 01:38:51.840
This is going to connect our user and we'll be able to get all of his messages.

01:38:53.118 --> 01:38:55.492
Now let's see if our If statement here makes sense.

01:38:55.785 --> 01:38:58.500
So if there is no odd token, then return Auth.

01:38:58.829 --> 01:39:05.315
But if there is odd token, then simply show this and that's exactly what we want to see.

01:39:05.626 --> 01:39:09.839
So let's try creating a user and then logging in as that user.

01:39:10.719 --> 01:39:17.492
Before we go ahead and sign up, let's quickly open up the stream chat overview right here.

01:39:17.785 --> 01:39:21.699
You can go to chat and then explorer under users.

01:39:21.960 --> 01:39:26.479
You should be able to see just yourself, your own user and then under channels.

01:39:26.880 --> 01:39:28.480
No results at the moment.

01:39:28.880 --> 01:39:35.420
So if we successfully did everything once we sign up, we should see a new user created right here.

01:39:35.729 --> 01:39:39.619
So let's go to our medical pager before I click sign up.

01:39:40.009 --> 01:39:42.719
I'm going to open the console and let's click.

01:39:43.012 --> 01:39:43.305
sign up.

01:39:43.599 --> 01:39:46.777
There we go, we have an error which is completely normal.

01:39:47.131 --> 01:39:49.546
We did a lot of coding, but we haven't tested it.

01:39:49.760 --> 01:39:52.158
so now is the time to finally do so.

01:39:52.594 --> 01:39:59.751
We have a 500, Let's look at it, 500 on the sign up and we have a message.

01:40:00.158 --> 01:40:06.128
This method can only be used on server side using your Api secret use client and then stream Connect.

01:40:06.439 --> 01:40:09.989
So looks like we are using something that shouldn't be used on the backend.

01:40:10.279 --> 01:40:12.099
Let's check it out in more detail.

01:40:12.429 --> 01:40:15.465
Looking at the code and looking at the stream documentation.

01:40:15.812 --> 01:40:23.600
I've noticed that right here alongside stream chat and just requiring stream chat, we also have to create an instance out of it.

01:40:23.973 --> 01:40:26.960
So right there we have to say stream Chat.

01:40:28.079 --> 01:40:32.144
I'm assuming that the values of these environment variables are undefined.

01:40:32.832 --> 01:40:43.631
so let's go to our index and then let's take this require.env.config And let's just put it right here above where we need those values.

01:40:44.079 --> 01:40:49.809
I'm going to save it, go back, and one more time I'm going to click sign up.

01:40:50.238 --> 01:40:51.786
There we go.

01:40:52.560 --> 01:40:57.256
We didn't have the values for the environment variables, so let me quickly explain what happened.

01:40:57.565 --> 01:41:10.960
We were trying to connect to this specific thing and it was saying you cannot connect These values are not filled in so I assumed that the environment variables from the Env weren't filling in.

01:41:11.760 --> 01:41:17.799
and that means that we need to require the Envconfig just prior to using the environment variables.

01:41:18.239 --> 01:41:22.199
So just by adding this line, we fixed the issue.

01:41:22.639 --> 01:41:31.359
But also, it's good that we came across this issue because I've noticed that we were missing this dot stream chat here, so definitely make sure to include that part.

01:41:31.828 --> 01:41:34.929
With that said, we are actually logged in.

01:41:35.219 --> 01:41:51.190
As you can see right there Channel Container We have our channels and direct messages and you have no channels currently of course right now we don't even have the button to create those channels, but if there were any, they would show here.

01:41:51.600 --> 01:41:57.931
What we could do is now go to Stream Chat overview and see if that user has been created.

01:41:58.422 --> 01:42:03.460
So let's go to Explorer users and look at that.

01:42:03.920 --> 01:42:08.079
This is our user id and if you click it you can see right here.

01:42:08.319 --> 01:42:10.970
you can see the phone number, the hashed password.

01:42:11.393 --> 01:42:16.519
This is what the hash looks like so we don't want to share a plain text password.

01:42:16.859 --> 01:42:20.895
And then finally here is the name and the full name and the image.

01:42:21.279 --> 01:42:22.079
Everything is here.

01:42:22.479 --> 01:42:27.760
The user has been created, which means that our sign up works.

01:42:28.159 --> 01:42:34.551
Now let's try to log out and let's try to see if the sign in works, but you might have a question.

01:42:34.853 --> 01:42:43.800
how do we actually log out? Well, we have a button here, but right now it's not doing anything so let's make it do something to do that.

01:42:44.110 --> 01:42:55.786
I'm first going to close all the files and collapse the files and folders, go to client source components and then that's going to be channel list container.

01:42:56.560 --> 01:42:59.360
More specifically, we should be looking at the sidebar.

01:42:59.640 --> 01:43:04.616
so I'm going to go to the top and there is our logout button.

01:43:05.118 --> 01:43:08.933
What we have to do is just below: create a new function.

01:43:09.439 --> 01:43:12.800
Const logout is equal to an arrow function.

01:43:13.920 --> 01:43:19.118
And basically we want to clear the cookies and also we want to reload the window.

01:43:20.079 --> 01:43:29.299
So how do we clear the cookies? Well, let's go to the app.jsx I'm again going to copy all of these including the Auth token.

01:43:29.840 --> 01:43:34.159
I'll go back to the channel list container and paste them all here.

01:43:34.719 --> 01:43:36.749
Now we just have to do some formatting.

01:43:37.039 --> 01:43:40.010
Remove these previously object keys.

01:43:40.456 --> 01:43:42.999
We just have the cookies dot get.

01:43:43.379 --> 01:43:54.746
But now we have to switch all of these from cookies.get To Cookies.remove These have to be semi-colons So let's do it like this.

01:43:55.279 --> 01:43:57.679
And as you can see, our cookies are not defined.

01:43:58.009 --> 01:44:04.297
So at the top, let's just say const cookies is equal to new cookies.

01:44:04.960 --> 01:44:05.880
Now below.

01:44:06.800 --> 01:44:18.319
We are removing all the cookies and finally we have to call the window location dot reload to reload the page to get us back to the authentication page.

01:44:19.520 --> 01:44:22.720
Finally, this logout is not being used right now.

01:44:23.039 --> 01:44:27.873
So let's pass it as a prop to our sidebar and now on Sidebar.

01:44:28.285 --> 01:44:31.020
Let's retrieve it from Props right here.

01:44:31.520 --> 01:44:35.279
and let's actually use it once somebody clicks on this button.

01:44:35.600 --> 01:44:46.106
So I'm going to give this div an on click listener and simply call the logout function once somebody clicks on it before actually testing it out.

01:44:46.453 --> 01:44:48.000
I've actually made a typo.

01:44:48.399 --> 01:44:51.279
This here is remove and not removes.

01:44:51.760 --> 01:44:53.920
Now if we save it, let's finally check it out.

01:44:54.222 --> 01:44:58.573
We are back on our medical pager and let's click the log out button.

01:44:58.960 --> 01:44:59.564
There we go.

01:44:59.866 --> 01:45:03.345
We were logged out and we're back on the sign up screen.

01:45:03.679 --> 01:45:07.887
Let's go to the sign in and let's try to sign in as Dr.

01:45:08.463 --> 01:45:12.799
Smith one more time and the sign in worked perfectly.

01:45:13.279 --> 01:45:17.725
We are in great notice how we no longer have the error here.

01:45:18.011 --> 01:45:20.359
It's just you have no channels because that's it.

01:45:20.666 --> 01:45:21.939
We don't really have them.

01:45:22.269 --> 01:45:25.119
So now let's create the rest of the screen.

01:45:25.519 --> 01:45:33.760
the entire right part, which is the channel container where the messages are going to be the input for sending messages, gifs, and everything else.

01:45:34.106 --> 01:45:44.079
Let's start with the channel container if you remember correctly inside of the app.jsx we have the channel list container and finally the channel Container.

01:45:44.369 --> 01:45:48.079
Now is the time that we start working on that second piece of the puzzle.

01:45:48.380 --> 01:45:54.943
So let's go inside of the channel container and let's start implementing the logic and the Jsx.

01:45:55.520 --> 01:45:59.279
First of all, we're going to import a few things from stream.

01:46:00.000 --> 01:46:12.000
These things are going to be channel and also use chat context and this is coming from stream Dash Chat Dash React great.

01:46:12.354 --> 01:46:20.751
These are all the external imports, but we're also going to have quite a few internal imports meaning components that we are yet to create.

01:46:21.118 --> 01:46:23.840
These components are channel inner.

01:46:24.880 --> 01:46:26.960
Also, create channel.

01:46:27.399 --> 01:46:32.479
We're gonna have the edit channel and finally the Theme message.

01:46:33.679 --> 01:46:38.319
These things are coming from Dot Slash Again, that's our components folder.

01:46:39.600 --> 01:46:42.986
so let's quickly create the layout for these four components.

01:46:43.600 --> 01:46:58.520
First, starting with the Channel Inner, I'm going to create a new component Channel Inner Dot Jsx Again Inside of there, let's run rafce and I'm simply going to put Channel Inner inside of it.

01:46:59.039 --> 01:47:16.479
Then moving on to the second thing, which is the Create Channel component that's going to be Create Channel Dot Jsx Again, I'm going to copy what we had in the Channel Inner and simply change the naming to Create Channel.

01:47:17.760 --> 01:47:20.981
Moving on to the third thing, which is the Edit Channel thing.

01:47:21.416 --> 01:47:22.284
So right there.

01:47:22.719 --> 01:47:23.372
New file.

01:47:24.025 --> 01:47:38.460
Edit Channel Dot Jsx Again, I'm going to copy what we had in the Create and paste it here, rename this to Edit Channel, and then going back one more time for our Team message.

01:47:38.729 --> 01:48:02.960
I'm going to create a new file called Team Message.jsx and final time, I'm going to copy it, go to the message and rename everything to Team Message And don't forget we have to go to the index, Duplicate this four times, and finally, we have to add imports for all of these components.

01:48:03.453 --> 01:48:13.059
So these components are going to be the ones we just created, So that's going to be Channel Inner right here.

01:48:14.000 --> 01:48:15.859
Create Channel as well.

01:48:16.479 --> 01:48:20.739
Finally, Edit Channel and the Theme message.

01:48:21.439 --> 01:48:26.239
With that, we've created all of the imports and I think that's going to be it for the components.

01:48:26.479 --> 01:48:29.439
We might have just one or two more, but we are basically done.

01:48:30.479 --> 01:48:35.398
So let's see how we can use those components to create a layout in our channel container.

01:48:36.158 --> 01:48:39.466
First things first, we need to get the information about a specific channel.

01:48:39.893 --> 01:48:50.079
We can say const that's going to be channel is equal to use chat context that's going to give us the information about the current specific channel.

01:48:51.039 --> 01:48:59.359
Then we need to know are we currently creating that channel, Then we have to show a specific message or a dashboard for creating that channel.

01:48:59.680 --> 01:49:22.015
So we have to have a variable called is creating and if we are creating we want to return a specific Jsx block, then we're also going to have one more state which is is editing So I'm going to copy this, paste it here, and say is editing These are some states that we always need to be aware of.

01:49:22.239 --> 01:49:29.371
We have to know this information inside of the channel container, but we also have to know it inside of the channel list container.

01:49:29.725 --> 01:49:36.994
For that reason, we're going to declare these state fields right inside of our app and that will be the next step.

01:49:37.305 --> 01:49:54.238
So right here, let's create a state field called Const: Create Type Set, Create Type and that's going to be equal to use state and we're going to leave it as an empty string.

01:49:55.198 --> 01:49:57.359
We also have to import use state at the top.

01:50:02.158 --> 01:50:05.319
Okay, and I'm going to duplicate this two more times.

01:50:06.000 --> 01:50:07.899
The second thing is is creating.

01:50:08.279 --> 01:50:17.520
So is the user currently creating a new chat room and also Set is creating and at the start it's going to be set to false.

01:50:19.039 --> 01:50:24.146
Then finally we have is editing and that's going to be set.

01:50:24.479 --> 01:50:33.100
Is editing also set to false? Now that we have these variables, we can pass them as props to our components.

01:50:33.470 --> 01:50:40.568
So we can say is creating is equal to is creating and then set is creating is equal to set is creating.

01:50:40.871 --> 01:50:50.980
We also want to pass Set is editing is equal to set, is editing and finally is editing itself is equal to is editing.

01:50:51.520 --> 01:50:55.119
You might already notice that this is not the best way to pass props.

01:50:55.413 --> 01:50:59.180
A better approach in this case would be to use the context api.

01:50:59.569 --> 01:51:02.142
But for now, let's keep it like this.

01:51:02.453 --> 01:51:08.719
I'm going to copy this and paste it right here so that we are also passing the props to our channel container.

01:51:10.000 --> 01:51:12.079
Our channel container is also going to need.

01:51:12.579 --> 01:51:21.588
The create type is equal to create type and I've just noticed we won't need this is editing.

01:51:22.137 --> 01:51:24.331
Rather, we will need set.

01:51:24.880 --> 01:51:36.300
Create Type is equal to Set Create type like this and I just noticed I have a typo right here.

01:51:36.800 --> 01:51:37.897
Okay, now we're good.

01:51:38.262 --> 01:51:40.266
Now we're accepting all of these props.

01:51:40.568 --> 01:51:46.419
We can even copy them and we're accepting them inside of the channel container so we can go back.

01:51:46.809 --> 01:51:47.198
And now.

01:51:47.786 --> 01:51:52.800
right here in the props, we can destructure them all right here.

01:51:53.760 --> 01:51:55.439
Of course we have to separate them by commas.

01:51:55.789 --> 01:51:58.499
so let me add some commas here and again.

01:51:58.759 --> 01:52:04.088
I'm going to use some keyboard magic to simply put them all in one row.

01:52:04.560 --> 01:52:05.300
There we go.

01:52:05.670 --> 01:52:11.119
So now we simply accepted all of the props we're passing right inside of the channel container.

01:52:11.439 --> 01:52:18.559
And now based on these variables we can show is creating window is editing window, or the channel container itself.

01:52:19.279 --> 01:52:21.613
First let's start with is creating.

01:52:22.079 --> 01:52:25.880
If the user is creating a new channel, we can create a Div.

01:52:26.319 --> 01:52:39.939
That div is going to have a class name which is going to be equal to channel underscore, underscore container, and then inside of there we can simply render the create channel component.

01:52:40.279 --> 01:52:45.359
It is going to be a self-closing tag and we can pass two things.

01:52:46.238 --> 01:52:51.879
The create type is equal to create type and we can also pass.

01:52:52.269 --> 01:52:56.079
Set is creating which is going to be equal to set is creating.

01:52:57.760 --> 01:52:58.569
Now for the editing.

01:52:58.840 --> 01:53:03.180
I'm simply going to copy this div and it's going to remain the same.

01:53:03.470 --> 01:53:14.079
This is going to be channel container but instead of create channel we're going to have edit channel and instead of the create type which we don't need, we're gonna be passing.

01:53:15.079 --> 01:53:19.546
Set is editing great, so that's it.

01:53:19.901 --> 01:53:29.039
Right now, we have no way of seeing these components because we don't have buttons to initiate the creation process or the editing process.

01:53:29.520 --> 01:53:31.714
So let's keep it going with all the possible states.

01:53:32.068 --> 01:53:37.199
We have just one more state and that is going to be const empty state.

01:53:37.519 --> 01:53:44.422
That happens when we just create a chat and we have no messages yet so we want to display something.

01:53:44.880 --> 01:53:46.937
it's going to be an instant return.

01:53:47.279 --> 01:53:56.880
We are going to return a Div with a class name equal to channel dash Empty Underscore Underscore container.

01:53:58.079 --> 01:54:00.776
Now inside of that Div, we're going to have two paragraphs.

01:54:01.165 --> 01:54:18.799
First, one is going to have a class name equal to channel dash, empty, Underscore Underscore First and in there we can say this is the beginning of your chat history and then I'm going to copy that.

01:54:19.119 --> 01:54:21.960
The second one is going to be channel empty.

01:54:22.319 --> 01:54:35.359
Second and there we can say something like send messages, attachments, links, emojis, and more.

01:54:36.319 --> 01:54:38.170
So this is our empty state.

01:54:38.539 --> 01:54:41.039
And finally, let's declare the channel container itself.

01:54:42.000 --> 01:54:46.679
The Div is going to have the class name equal to channel container.

01:54:47.359 --> 01:54:50.479
And there we're going to render the channel component.

01:54:51.599 --> 01:54:53.427
Channel is not a self-closing tag.

01:54:53.793 --> 01:54:58.560
We have something inside of there and that something is channel inner.

01:54:58.773 --> 01:55:01.399
So this is the inner part of the chat application.

01:55:02.319 --> 01:55:06.144
We have to pass a few props to our channel, so let's expand it.

01:55:06.560 --> 01:55:10.319
The first prop is going to be empty state indicator.

01:55:11.520 --> 01:55:30.213
That empty state indicator is going to be equal to empty state and then we can define how our message is going to look like so we can say message is equal to and that's going to be a callback function where we get message props and we also get the index.

01:55:30.479 --> 01:55:45.019
Make sure to spell this correctly and what do we return? We return our special team message that's going to have a key equal to I and we're also going to spread the props right inside of it.

01:55:45.359 --> 01:55:46.719
So dot dot, Message props.

01:55:47.679 --> 01:55:57.333
Finally, we just have to pass one last prop to our channel Inner which is set is editing is equal to set is editing.

01:55:57.920 --> 01:56:22.359
So just before we go to the browser to check it out, we are going to add one more thing inside of our app.jsx If you scroll to the top just next to our app.css we are going to add one more import line more specifically import stream dash chat, react and then we're going to take their index css for pre-built components.

01:56:23.198 --> 01:56:28.105
This is going to help us to more quickly get a better looking chat application.

01:56:28.639 --> 01:56:32.199
Now that we're done with that, let's go into our channel inner.

01:56:32.719 --> 01:56:36.213
The channel inner is just a bit different from all the other components.

01:56:36.560 --> 01:56:46.279
It has a lot of business logic and a lot of if statements just to check if something that we pass to the input is an attachment or a gif or a text.

01:56:46.719 --> 01:56:55.553
For that reason, I don't want you to spend a lot of time on doing something that's not really educational and we're simply going to copy and paste it, so attach below.

01:56:55.907 --> 01:57:00.932
You'll find the entire code for the channel inner as you can see right there.

01:57:01.199 --> 01:57:11.619
It mostly has some overrides, setting up the states, using things from the channel, action, context, and then mainly using a lot of different stream chat components.

01:57:12.319 --> 01:57:15.774
Let's see the Jsx part and this is about it.

01:57:16.158 --> 01:57:23.159
We are setting up the window, the team channel header, message list, message input, and the threads.

01:57:23.760 --> 01:57:26.586
These components are not the components that we create.

01:57:27.039 --> 01:57:31.791
They are here for us right out of the box when using stream chat.

01:57:32.399 --> 01:57:35.839
So let's save it and let's take a look in the browser.

01:57:36.399 --> 01:57:46.559
There's currently nothing here, but if we go to Stream Chat Explorer which is right here and then under users find your new user, copy the Id.

01:57:47.118 --> 01:57:54.889
Let's go under channels, create a new channel, and let's call it something like cardiology to keep it medical themed.

01:57:55.299 --> 01:58:00.159
That's going to be a team channel type and let's click create.

01:58:00.639 --> 01:58:06.839
Once it's created, let's go to members, add new channel member and paste that Id you copied.

01:58:07.520 --> 01:58:10.158
Let's click, add and go back to medical pager.

01:58:11.359 --> 01:58:14.372
If you reload the page, you should be able to see that.

01:58:14.630 --> 01:58:17.792
Now we have the right portion of our screen.

01:58:18.416 --> 01:58:19.771
Cardiology three users online.

01:58:20.136 --> 01:58:22.719
This is the beginning of your chat history.

01:58:23.092 --> 01:58:25.880
Send messages, attachments, links, and more.

01:58:26.560 --> 01:58:29.198
Great! So let's try sending our first message.

01:58:30.031 --> 01:58:34.373
Let's say hello World And there we go.

01:58:34.711 --> 01:58:44.960
We can only see team message and for every message, that's the only thing we'll be able to see because we haven't yet coded out the most important part and that is the actual message.

01:58:45.245 --> 01:58:51.645
If you click right there and more info, you'll notice that we also don't have the edit channel component, so that's something.

01:58:51.851 --> 01:58:53.946
We'll have to code that together as well.

01:58:54.479 --> 01:58:57.039
Now let's start with coding out the theme message.

01:58:57.760 --> 01:59:00.559
Now let's remember where our theme message is.

01:59:00.879 --> 01:59:03.306
It's going to be in the channel container.

01:59:03.813 --> 01:59:09.439
If we scroll down, you'll notice that we have our custom team message here.

01:59:10.079 --> 01:59:20.063
but I've just noticed that Stream Chat React already has a good looking team message and we can get to it by specifying message team.

01:59:20.607 --> 01:59:22.238
That component is deprecated.

01:59:22.616 --> 01:59:26.079
Feel free to find any other newer or rename component.

01:59:26.479 --> 01:59:30.986
I really like the look of this one so we'll keep using it for this video.

01:59:31.315 --> 01:59:37.413
We no longer need this theme message right here, so feel free to delete it from the components folder.

01:59:37.840 --> 01:59:39.279
Now we can use this message theme.

01:59:39.520 --> 01:59:44.159
If you scroll down and simply paste it right inside of here.

01:59:44.719 --> 01:59:50.135
that's going to display all the messages that our users have sent and there we go.

01:59:50.447 --> 01:59:51.695
take a look at that.

01:59:52.007 --> 01:59:52.007
Dr.

01:59:52.319 --> 01:59:52.319
Smith.

01:59:52.622 --> 01:59:53.528
Here is the image.

01:59:53.831 --> 01:59:58.479
Here is even the timestamp and here's a hello and a Hello World.

01:59:58.809 --> 02:00:07.599
We can try testing some new things like tests and then an emoji and that is sent as well our messages are being sent.

02:00:07.959 --> 02:00:10.479
We have the entire chat room here.

02:00:10.960 --> 02:00:10.960
Dr.

02:00:11.440 --> 02:00:11.920
Smith timestamps.

02:00:12.354 --> 02:00:15.289
We can even add emotes to those messages.

02:00:15.619 --> 02:00:23.386
As you can see right now, we can even open the thread and start typing something right there in the thread as well.

02:00:23.840 --> 02:00:25.489
And finally, you can also delete.

02:00:25.819 --> 02:00:30.719
So I deleted a test message and let's also edit Hello World.

02:00:31.199 --> 02:00:33.520
Let's change that to Hello Doctor.

02:00:34.880 --> 02:00:35.520
There we go.

02:00:35.840 --> 02:00:41.279
So our chat just got so much better by using built-in Stream Chat components.

02:00:42.399 --> 02:00:44.853
Of course, I've shown you that you can do everything yourself.

02:00:45.146 --> 02:00:54.319
You can build the Css, the Jsx, everything there is, but you can also pick and choose from the wide variety of stream React components.

02:00:54.649 --> 02:00:56.630
Let me show you what I mean.

02:00:56.960 --> 02:01:04.479
Going to their website, we can go to Chat Messaging, open up the docs, and then under React, you'll see Ui components.

02:01:05.679 --> 02:01:08.000
Here are some of the components we've just used.

02:01:08.560 --> 02:01:15.840
There's the chat channel list, channel, message list, and everything you need to know to build your own fully custom thing.

02:01:16.189 --> 02:01:25.380
If we scroll down below, you'll see here the custom code examples: emoji, picker channel, a lot of different things that you can pick and choose from.

02:01:25.610 --> 02:01:30.168
So what I really liked about Stream is that they offer you the api just raw data.

02:01:30.524 --> 02:01:38.367
You can build everything with it, but they also allow you to pick and choose from pre-built good-looking components as we've done it right now.

02:01:38.800 --> 02:01:41.460
Great! Our chat just got so much better.

02:01:41.840 --> 02:01:48.199
Now if we click right there, you can see that the edit channel and the add channel buttons have not been yet created.

02:01:48.640 --> 02:01:58.045
So let's first add a button to create a channel and then the entire dashboard view to create name channels invite different people into it.

02:01:58.376 --> 02:02:03.699
and then we'll be able to browse through a lot of different channels that our users will be able to create.

02:02:03.999 --> 02:02:05.198
Let's do that right away.

02:02:05.494 --> 02:02:16.293
We can add the button to add a new channel by going to client source components and then that's going to be channel list or team channel list.

02:02:16.800 --> 02:02:24.479
If we scroll down, you'll see that we're currently displaying the text of channels if the type is steam or direct messages.

02:02:24.782 --> 02:02:28.310
If the type is not team, we can even see that in the code.

02:02:28.532 --> 02:02:38.648
Right now we have a channels header and a direct messages header, but now we have to add a plus icon right here if we want to create a new channel or a new direct message.

02:02:38.950 --> 02:02:41.633
We even left it to do right here.

02:02:42.124 --> 02:02:52.000
Button add Channel So as you can see at the top We are already importing an icon from assets called add Channel and that is a simple Svg.

02:02:52.449 --> 02:03:07.520
But on that Svg, I've already added the onclick property and that's simply going to set the state of Create type to type meaning either a direct message or a team chat and it's going to trigger the set is creating to be true.

02:03:07.866 --> 02:03:12.539
That way, our new window for the channel creation is going to open.

02:03:12.960 --> 02:03:18.319
So what we can do is simply call the Add Channel component.

02:03:19.279 --> 02:03:23.520
Currently, we don't have access to the props that we have to pass to the add channel.

02:03:24.479 --> 02:03:26.319
even the team channel list doesn't have them.

02:03:26.669 --> 02:03:30.439
so let's see where the team channel list is getting called.

02:03:30.880 --> 02:03:39.669
We can just search it like this: team Channel list and we can see that it's getting called into the channel list container if you remember correctly.

02:03:39.959 --> 02:03:46.685
If we go back to the app, we sent some props to the Channel list container, but we haven't yet used them.

02:03:47.039 --> 02:04:01.118
So let's copy these variables, go into the Channel list container and now you can simply put curly braces right there to destructure the props and then paste all of the variables we're passing from app.

02:04:02.319 --> 02:04:10.619
So let's take all of these variables and let's paste them right inside of our team Channel list right here and under messaging as well.

02:04:10.969 --> 02:04:12.719
So I'm going to paste them.

02:04:13.092 --> 02:04:33.920
and now we have to say is creating if we copy it and is equal to is creating then Set is creating also is equal to Set is creating one more set Create type is equal to Set Create type and finally, Set is editing is equal to Set Is editing great.

02:04:34.800 --> 02:04:46.148
Now we're passing all of the necessary props to our Team Channel list both for messaging which is a chat for two people and then also in the Team Chat which is for chat of three or more people.

02:04:46.479 --> 02:04:52.679
Great! Let's save it and now we can have access to these same props right inside of the Team Channel list.

02:04:52.949 --> 02:05:01.360
So one more time I'm going to copy these go into the Team Channel list and now we have access to them right inside of here.

02:05:01.760 --> 02:05:03.840
The way we're doing it right now is not ideal.

02:05:04.139 --> 02:05:10.000
We had to pass these props from app to the channel list container and then one more time to the Team Channel list.

02:05:10.359 --> 02:05:19.263
A preferred way would be to switch it to a context api and if this video doesn't end up lasting too long, we're going to make that switch at the end.

02:05:19.535 --> 02:05:27.198
If not, please let me know in the comments if you'd like a special video or a project only focusing on the context api.

02:05:28.238 --> 02:05:33.333
With that said, let's go to our Team Channel list and now we can make use of these variables.

02:05:33.786 --> 02:05:38.342
More specifically, we can simply pass them into the Add channel.

02:05:38.800 --> 02:05:42.799
So I'm going to go back to the Channel List container and right inside of here.

02:05:43.019 --> 02:05:45.839
I'm going to copy these four values.

02:05:46.560 --> 02:05:50.068
We can simply paste them right there and indent this properly.

02:05:50.491 --> 02:05:53.439
The last thing that we have to pass is the type variable.

02:05:53.719 --> 02:05:57.705
We're going to make a check to see if type is equal to team.

02:05:58.043 --> 02:06:01.210
In that case, we're simply going to have a string of team.

02:06:01.539 --> 02:06:05.439
Else, we're going to have a string of messaging.

02:06:06.399 --> 02:06:11.461
With this done, our Ad channel is successfully going to trigger the set is creating state.

02:06:11.805 --> 02:06:16.399
Now let's check it out and see if we can actually see the Add Channel button.

02:06:17.279 --> 02:06:20.925
Back on the application, you can see that we have two clickable buttons.

02:06:21.336 --> 02:06:23.631
Let's try to create a new channel.

02:06:24.000 --> 02:06:28.612
Once I click here, you can see that we have a blank Create Channel component.

02:06:29.118 --> 02:06:34.133
This basically means that we've already created the Create Channel component, but we haven't implemented the logic.

02:06:34.466 --> 02:06:36.528
So let's do that right now.

02:06:36.960 --> 02:06:39.760
Let's move into the Create Channel component right here.

02:06:40.119 --> 02:06:43.669
and as you can see right now, we don't have anything.

02:06:44.019 --> 02:06:53.999
So what we can do is we can first import use Chat context which is going to be coming from Stream Chat React.

02:06:55.118 --> 02:07:14.891
Then we are also going to import a new component called user List That's going to be user list and that will be coming from that slash meaning that is a component that we are yet to create and we need one more thing from the assets and that's going to be close.

02:07:15.279 --> 02:07:22.000
Create channel icon and that's going to be coming from dot dot slash assets.

02:07:22.800 --> 02:07:25.266
Great! Now let's create the layout.

02:07:25.760 --> 02:07:27.840
First, let's create the channel name input.

02:07:28.182 --> 02:07:39.759
That's going to be a component above our current functional component called channel name input and that component is going to accept a few props.

02:07:40.239 --> 02:07:51.359
It's going to accept a channel name prop which we're going to give the default value to be equal to an empty string and also set channel name.

02:07:52.078 --> 02:07:58.078
This is going to be a function so we can have a return there and inside of there we can return the Jsx.

02:07:59.359 --> 02:08:02.439
More specifically, we are going to have one div.

02:08:03.118 --> 02:08:13.340
that div is going to have a class name equal to channel dash name, dash, input, underscore, underscore wrapper inside of there.

02:08:13.610 --> 02:08:18.960
We're gonna have one B tag and that B tag is simply going to say name.

02:08:20.399 --> 02:08:29.600
Then we're going to have an input tag and that input is of course going to have a value and it's also going to have the on change property.

02:08:30.399 --> 02:08:56.249
Right now we're going to leave them blank and finally it's going to have a placeholder which is going to be equal to channel name and I'm going to put no spaces here because we have to create a channel name with no spaces in between and we're also going to have one more P tag which is going to say add members Let's quickly create a value and an on change for this and let's change the typo to on change.

02:08:56.719 --> 02:09:19.439
So what we can do is say const handle change is going to be equal to a function where we get the event and then in there we can say event dot prevent default We discussed a few times what that does that prevents the browser reload and finally we're going to use the event target value to populate the channel name.

02:09:20.238 --> 02:09:27.039
So on change we can call the handle change and the actual value is going to be channel name.

02:09:27.599 --> 02:09:31.429
Okay now let's use that inside of our component just to see how it looks like.

02:09:31.679 --> 02:09:33.760
So it's going to be channel name like this.

02:09:34.560 --> 02:09:45.827
I'm going to save it and if you click a plus here you can see we have name and then channel name looks like our no spaces is not fitting here so I'm just going to remove it from the placeholder.

02:09:46.158 --> 02:09:50.501
Okay, let's remove it from here and for now we're going to comment out this component.

02:09:50.764 --> 02:09:55.775
Or you know what, let's completely remove it because we have to add some other layout details.

02:09:56.238 --> 02:10:04.519
First of all, we're going to have a Div that's going to have a class name equal to create Dash Channel Underscore underscore container.

02:10:05.439 --> 02:10:25.460
Inside of that div, we're going to have one more Div which is going to have a class name equal to create Dash Channel Underscore underscore header and in there we can check if we're currently on the team chat or messaging chat so we can say if create type is equal to team.

02:10:26.000 --> 02:10:45.188
In that case, we can simply say something like create a new channel or otherwise we're going to simply say send a direct message great And this create type is coming as a prop to our create channel component.

02:10:45.565 --> 02:10:47.760
so let's see if we're passing that value correctly.

02:10:49.118 --> 02:10:55.279
One trick that you can do is go to search and then open the opening component bracket and then the name of the component.

02:10:55.600 --> 02:10:59.919
That way you'll be able to see where you're calling the current component you're working on.

02:11:00.239 --> 02:11:08.399
If we go there, you can see that Indeed, we are passing two different props that we can use so we can go back and use these props.

02:11:08.891 --> 02:11:12.746
Create Type and Set is creating So right here.

02:11:13.200 --> 02:11:19.920
Destructure the props, create Type and Set is creating great.

02:11:21.198 --> 02:11:29.005
Now below that P tag, we are also going to have a close create Channel icon and we're simply going to pass.

02:11:29.336 --> 02:11:35.639
Set is creating straight to it just so we can reset it to not creating below that div.

02:11:35.979 --> 02:11:51.177
We're going to have one more logical block and we can say if Create Type is equal to team then and only then we can show the channel name input that is this component we just created.

02:11:51.520 --> 02:11:59.826
So we're going to call it as a self-closing tag and remember we have to pass two props to it which is the channel name and set channel name.

02:12:00.319 --> 02:12:07.599
So right there I'm going to pass the channel name and also the set channel name to be equal to set channel name.

02:12:08.158 --> 02:12:17.927
But as you can see right now we don't have access to those values and usually whenever you have a pair of something and set something that's going to be a state variable.

02:12:18.257 --> 02:12:34.379
So just at the top of our create channel we can create a new use state like this and it's going to be channel name, set channel name and at the start it's going to be set to an empty string.

02:12:34.719 --> 02:12:41.466
We also need to import use state from React at the top Just like this.

02:12:41.920 --> 02:12:44.880
Great Now let's save it and see how it looks like.

02:12:45.920 --> 02:12:53.279
Now if we click channels, add we have create a new channel and then we can enter the channel name and also add members.

02:12:53.679 --> 02:12:58.194
But if we go to direct messages right here, send a direct message.

02:12:58.537 --> 02:13:02.719
We don't have that naming of the channel because it's just going to be a direct message.

02:13:04.000 --> 02:13:07.250
As we discussed previously, the user list component doesn't exist yet.

02:13:07.559 --> 02:13:13.188
If we go to client source components, there is not a user list component.

02:13:13.542 --> 02:13:15.648
So let's create it right now.

02:13:16.336 --> 02:13:23.319
Components: New File User List dot Jsx Our user list is going to be a longer component.

02:13:23.589 --> 02:13:26.860
We're going to have a few functional components inside of here.

02:13:27.159 --> 02:13:38.839
so let's start at the top import React and we're also going to need use effect and also use state hooks and that is coming from React.

02:13:39.359 --> 02:13:50.158
Then we're going to need the avatar component and also use chat channel and this is coming from Stream Chat React.

02:13:51.439 --> 02:13:59.359
Finally, we're going to need import invite icon and that is coming from dot slash assets.

02:14:01.039 --> 02:14:10.159
Great! So let's create our primary functional component which is going to be const user list and that's going to look like this.

02:14:10.520 --> 02:14:25.760
We are of course going to have a return and there we can return a div that's simply going to say user list Of course we have to switch this as well and we're going to do export default user list.

02:14:26.880 --> 02:14:28.536
Great! Now we have everything ready.

02:14:28.867 --> 02:14:36.662
We have to go into our index.js and export that component from there and finally back in the create channel.

02:14:37.039 --> 02:14:39.741
We should be able to see our user list.

02:14:40.078 --> 02:14:40.639
There we go.

02:14:40.919 --> 02:14:47.478
User list is showing up right here, both on channels and on the direct messages as well.

02:14:48.078 --> 02:14:57.634
Now, considering that we'll be making a lot of changes to our code for the user list, I'm going to pull my browser to the right side and go to the left so you can see in real time what's happening.

02:14:57.977 --> 02:15:01.519
Okay, let's go back to the user list and there we are.

02:15:02.158 --> 02:15:14.679
So what we can first do is to create one more helper functional component which is going to be called Const List Container and that's going to be a React functional component.

02:15:15.760 --> 02:15:19.920
All React functional components have access to a specific prop called children.

02:15:20.880 --> 02:15:26.479
So whatever components you render inside of this that's going to be populated into the children prop.

02:15:26.960 --> 02:15:42.986
In this case, we can say return and we're going to have a Div That Div is going to have a class name equal to user dash list, underscore, underscore container, and we're going to have one more Div inside of it.

02:15:43.439 --> 02:15:54.159
That div is going to have a class name equal to user dash list, underscore, underscore header, and inside of there we can simply have two paragraphs.

02:15:54.960 --> 02:16:03.920
The first one is going to say user and the second one is going to say invite finally below that we want to render the children.

02:16:05.520 --> 02:16:11.659
I'm going to save that and finally, we can now use that list container inside of our user list.

02:16:11.999 --> 02:16:27.920
So right here instead of the Div, we're simply going to use the list container As you can see, it added the headers for the user and the invite, but the user list still remained there because we are rendering it as children below the user and the invite.

02:16:28.479 --> 02:16:42.936
Now we can start creating the second helper functional component which is going to be called Const user Item and that user item is again going to be a functional component, but it's going to be a bit more complicated.

02:16:43.291 --> 02:16:46.533
Let's first create the return Jsx right here.

02:16:47.040 --> 02:17:21.470
So we want to have a div and that div is going to have a class name equal to user dash item underscore underscore wrapper Inside of this div, we want to create one more div and this one is going to have a class name equal to user dash item, underscore underscore name dash wrapper inside of there we can show the user's avatar so we can say avatar that is going to be a self-closing tag and we want to get access to the current user that we are mapping over right now.

02:17:21.819 --> 02:17:31.865
We don't have access to that, so let's see how we can get all of the users into our list container and therefore into the individual user items.

02:17:32.638 --> 02:17:46.147
To get the users, we'll have to go inside of the user list and we'll have to create a new state const users and also set users and the default value is going to be equal to an empty array.

02:17:46.558 --> 02:17:51.679
Then we have to create a use effect hook which we're going to call when something changes.

02:17:52.879 --> 02:18:05.359
More specifically, we want to call it once filters change because sometimes we want the users for direct messages and sometimes when filters change, we want users only for channel messages.

02:18:06.159 --> 02:18:18.859
So instead of this use effect we can create a new function const get users and that is going to be an async function and in there we're going to of course get the users.

02:18:19.128 --> 02:18:25.718
So first, we're going to check if we're currently loading something and in that case, we're going to go outside of the function.

02:18:25.998 --> 02:18:42.720
We don't want to get users if we're loading something and that loading is going to be a state field so we can say use state autofill it And then there we can say loading and set loading at the start that's going to be set to false.

02:18:43.040 --> 02:18:47.469
If we're not loading something, we can set that loading to be equal to true.

02:18:47.760 --> 02:18:56.360
Because we're starting to get users, we want to enable our loading below that I'm going to create a try and catch block in there.

02:18:56.719 --> 02:19:03.998
we want to query the users and we are going to query the users from the use Chat Channel context.

02:19:04.638 --> 02:19:16.079
More specifically above, our use states we are going to get the client so const in curly braces client and that is going to be equal to use chat channel.

02:19:16.959 --> 02:19:19.427
But I've just noticed that this is not supposed to be channel.

02:19:19.690 --> 02:19:21.159
it's supposed to be context.

02:19:21.840 --> 02:19:25.319
Whenever you have a form like this, get something from use something.

02:19:25.759 --> 02:19:29.949
That means that it's a context or a hook so let's copy this.

02:19:30.279 --> 02:19:34.239
and instead of use chat channel, let's import use chat context.

02:19:35.679 --> 02:19:49.439
So from here we're getting a client, but what are we going to do with that? Well down below, we can say const response is equal to await client dot query users.

02:19:50.398 --> 02:19:59.940
So this is going to allow us to query all the users based on specific parameters and we can specify parameters like this in the first object.

02:20:00.159 --> 02:20:13.159
we're going to have the Id equal to and then we want to have one more object and then say dollar sign n e not equal to client dot user id.

02:20:13.920 --> 02:20:19.440
So basically we are excluding the queering of users for the user with the current Id.

02:20:19.840 --> 02:20:25.040
We don't want to find ourselves there because we are the people adding different users to the channel.

02:20:26.559 --> 02:20:27.306
Okay, looks like that.

02:20:27.555 --> 02:20:33.119
I saved my file for the first time in quite a while and I've noticed that we haven't declared our filters yet.

02:20:33.760 --> 02:20:43.165
I've just noticed that we don't even need these filters yet because we will be filtering based on the fact are we currently on the direct messages or on the channels.

02:20:43.497 --> 02:20:50.411
We don't need any specific filters for that and then we can pass some additional information to our query users object.

02:20:50.845 --> 02:20:58.079
If you hover over it, you'll be able to see that we have the sort options to sort by specific variable and also the options object.

02:20:58.411 --> 02:21:04.215
So the second object we'll pass here is going to be Id is equal to one.

02:21:04.639 --> 02:21:06.799
This is just the way we want to sort specific things.

02:21:07.360 --> 02:21:09.040
Here is the explanation.

02:21:09.600 --> 02:21:14.719
Then third thing are going to be the options and in the options we're going to provide our limit.

02:21:15.039 --> 02:21:19.591
So let's say that we want to limit only to the eight users.

02:21:20.000 --> 02:21:21.110
Great, That's about it.

02:21:21.479 --> 02:21:22.219
For our response.

02:21:22.590 --> 02:21:25.377
I have to rename it because I had a typo.

02:21:25.680 --> 02:21:29.359
Now let's see if we actually have anything in the response.

02:21:29.799 --> 02:21:48.639
I'll say if response.users.length In that case, we simply want to set the users to be equal to response.users Else we're going to have a special state field called is list empty or just list empty.

02:21:49.087 --> 02:21:50.431
So let's create it.

02:21:50.879 --> 02:21:57.759
use state list empty and set list empty at the start.

02:21:58.119 --> 02:22:00.213
that's going to be set to false.

02:22:00.559 --> 02:22:06.478
So if we don't have users, we can simply call the set list empty and set it to true.

02:22:08.318 --> 02:22:20.833
Finally, if there was a problem while catching the users, we can simply console, log the error and after this whole part is done, we can finally set the loading back to false.

02:22:21.439 --> 02:22:21.439
Great.

02:22:21.747 --> 02:22:24.440
Now we've created the function to get the users.

02:22:24.860 --> 02:22:24.860
now.

02:22:25.279 --> 02:22:33.398
let's actually call it if there is a client means if we are connected only then do we want to call getusers function.

02:22:34.478 --> 02:22:35.333
Let's do it.

02:22:35.760 --> 02:22:38.159
Save it and see if we're expecting something.

02:22:39.439 --> 02:22:50.141
Well, with that, we're simply populating the users, but we're not using the variable yet so we want to map over the users and for each user, we want to show a user item.

02:22:50.478 --> 02:22:51.439
Let's do just that.

02:22:51.759 --> 02:22:53.325
right inside of our list container.

02:22:53.611 --> 02:23:18.000
We're going to have a loading property and if we're currently loading in that case, we want to show a div which is going to have a class name which is going to be equal to user dash list, underscore, underscore message and that div is simply going to say loading users dot dot so we can put that here in new pair of parentheses with a column.

02:23:19.760 --> 02:23:20.586
If we're not loading.

02:23:20.862 --> 02:23:33.289
we want to see if we have the users so we can say if users question mark dot length And finally we want to say users question mark dot map We're mapping over the users in here.

02:23:33.619 --> 02:23:39.279
We have a callback function and for each user, we want to render the user item component.

02:23:39.680 --> 02:23:43.680
That's the component we created right here at the top.

02:23:44.159 --> 02:23:45.920
Of course we want to pass some things to it.

02:23:46.209 --> 02:24:04.608
So we're first going to provide an index which is going to be equal to I, We also want to provide a key which is going to be equal to user dot Id, and finally, we want to provide the user property which is going to be equal to the user we're mapping over.

02:24:05.200 --> 02:24:14.099
Now back in the user item through the props, we can access the user object and now we can get his name, avatar, and everything else.

02:24:14.719 --> 02:24:20.639
So the avatar component has the image property and that is going to be equal to user dot image.

02:24:21.013 --> 02:24:36.125
It also accepts a name property which is going to be equal to user dot full name, or user dot Id, and also you can set the size equal to the number of 32. Let's save it.

02:24:36.559 --> 02:24:39.679
If we hover over it, you'll see that this is the Javascript Mastery user.

02:24:39.999 --> 02:24:42.359
So far, we don't have a lot of users.

02:24:42.639 --> 02:24:44.199
We are currently logged in as Dr.

02:24:44.459 --> 02:24:46.845
Smith, so that's why we cannot see yourself.

02:24:47.200 --> 02:24:52.388
But if I remove this part here, you're gonna notice that we're gonna have two users: Dr.

02:24:52.811 --> 02:24:54.079
Smith and Javascript Mastery.

02:24:55.200 --> 02:24:55.540
But Dr.

02:24:55.880 --> 02:24:59.520
Smith is ourselves and we cannot invite ourselves to the chat we are creating.

02:24:59.851 --> 02:25:05.479
So that's why we're saying if our Id is not equal to the current Id of the user.

02:25:06.159 --> 02:25:08.469
There we go, we disappear from the list.

02:25:08.799 --> 02:25:12.619
and now alongside Avatar, let's add a name for that user.

02:25:13.040 --> 02:25:18.880
We can do that by adding a paragraph tag, and now let's add a name for the person we're inviting.

02:25:19.520 --> 02:25:35.399
We can add a paragraph, set the class name to be equal to user dash item, underscore, underscore name, and then inside of here, we can simply render user dot full name, or user dot Id.

02:25:36.159 --> 02:25:41.786
That means if for whatever reason we don't have access to the full name, we can simply show the user Id.

02:25:42.159 --> 02:25:42.752
Let's save it.

02:25:43.048 --> 02:25:46.319
And as you can see, this is Javascript Mastery.

02:25:47.520 --> 02:25:52.773
Now let's add icons to keep track of if we're inviting the person or not.

02:25:53.280 --> 02:26:20.559
We can add an icon by simply putting invite icon svg right here and saving it As you can see this is a filled check mark, but we can also have a self-closing div and then inside of there we can add a class name equal to user dash item underscore underscore invite dash empty If we do that, you'll notice that we have an empty checkbox.

02:26:21.120 --> 02:26:39.852
So now we have to be able to toggle between them and we can do that by creating a new use state field So we can say use state and we can call it selected So selected, set selected and the initial state is going to be false.

02:26:40.318 --> 02:26:43.409
Based on that, we can make use of that like this.

02:26:43.680 --> 02:26:50.626
if selected, then we show the invite icon, else we show the empty div.

02:26:51.200 --> 02:26:58.760
So let's save it and as you can see right now, we have just the empty div which is like an empty circle.

02:26:59.520 --> 02:27:12.159
So now how can we toggle between those? Well, we're going to add the on click property straight to this div and what we can do on click is simply handle Select.

02:27:13.280 --> 02:27:16.293
We're going to create that handle select function right here.

02:27:16.799 --> 02:27:24.331
Const: Handle Select Inside of there we can simply set selected inside of there.

02:27:24.617 --> 02:27:45.479
we get a callback function with the previous selected so we can say pre-selected and then we can simply return, not pre-selected This is how you do it in React when you want to modify something by the previous value and now if you see that we can click and toggle the users on and off.

02:27:45.920 --> 02:28:00.352
But the problem happens if you want to invite more users, if we had a second user right there then you wouldn't be able to toggle on and off both of them We have to keep track of which ones are toggled on and which ones are not to do that.

02:28:00.647 --> 02:28:14.799
We can go back to our Create channel and then right inside of here we are going to create a new use State field, use State and in here we can call it something like selected users.

02:28:15.840 --> 02:28:25.626
Then we're going to have set selected users and at the start we only want to input our own Id because we always want to be in the chat that we are creating.

02:28:25.910 --> 02:28:27.879
So how can we get to our Id.

02:28:28.159 --> 02:28:45.671
Well we can do that by using the Use Chat context so we can say const client and also we're gonna need set active channel that's coming from use Chat context and we call it as a hook.

02:28:46.079 --> 02:29:06.989
Of course there's the equal sign in between and now we have the client and we can simply get the user Id right here at the first element in the array by saying client dot, user Id Id all uppercase or if there isn't one, we can simply say or empty string.

02:29:07.400 --> 02:29:14.719
So what we've done is we've just created the selected users field and immediately added ourselves to that group.

02:29:15.359 --> 02:29:28.739
Okay, now that we have the selected and the Set selected users right here, what we need to pass into the user list is going to be the Set Selected Users Variable Set Selected Users is equal to Set Selected users.

02:29:29.079 --> 02:29:35.306
We can go to our user list and then right inside of here inside of our user item.

02:29:35.573 --> 02:29:38.057
We want to pass that over one more time.

02:29:38.411 --> 02:29:41.462
Set Selected Users Right now it's undefined.

02:29:41.897 --> 02:29:55.840
so right here inside of the user list, we need to get that Set Selected Users Great! Now we have access to the Set selected users right here inside of the user item.

02:29:56.799 --> 02:30:03.697
So what we want to do is we first want to check if the user has been selected so we can say if selected.

02:30:04.053 --> 02:30:14.879
In that case we want to set selected users to be equal to then we're going to have a callback function and in here we get Prev users.

02:30:15.413 --> 02:30:32.612
So what we can say is Prev Users Dot Filter We get that Prev user and then we want to filter the Prev user that doesn't have an Id equal to to the user dot Id.

02:30:33.359 --> 02:30:40.399
So basically we are keeping all of the selected users so far but removing the one that we've clicked right now.

02:30:40.719 --> 02:30:51.428
So if we had two more of these and if we clicked all of them and then click the third one, we would just remove the selected user from the third one and keep it on the first two ones.

02:30:51.760 --> 02:30:59.079
I know it's a bit confusing but I hope it makes just a bit of sense and then we're gonna have else and then on else.

02:30:59.359 --> 02:31:01.218
We want to do set selected users.

02:31:01.588 --> 02:31:07.319
We are again going to get prev users as a callback function.

02:31:07.840 --> 02:31:23.188
Let's make sure to close it properly and in this case we want to add a user so we can create an array where we spread all the previous users and finally append our current user Id to it right here.

02:31:23.497 --> 02:31:26.373
It should have been prevusers and not user.

02:31:27.040 --> 02:31:31.920
So the above part is just filtering out the currently clicked item if it was clicked.

02:31:32.959 --> 02:31:35.470
but this line is adding one more selected user.

02:31:35.819 --> 02:31:43.062
As you can see we are spreading over all of the previous users plus adding the one we just clicked.

02:31:43.520 --> 02:31:46.799
Great! So that part with the user item is now done.

02:31:47.359 --> 02:31:53.586
The final thing we can do is some slight error handling and handling the situations where we have no users.

02:31:54.000 --> 02:32:02.690
So what we can do is add one more use state field There We're going to say error and set error at the start.

02:32:03.000 --> 02:32:04.808
that's going to be set to false.

02:32:05.093 --> 02:32:09.129
So let's set it to false right there and right here.

02:32:09.379 --> 02:32:10.379
instead of Khan's log in.

02:32:10.629 --> 02:32:10.879
The error.

02:32:11.222 --> 02:32:17.748
we're simply going to say set error and we'll just say true now based on these conditions.

02:32:18.045 --> 02:32:23.226
instead of rendering the list container, if we have an error, we don't want to render that.

02:32:23.573 --> 02:32:29.280
So what are these conditions going to be? So we're going to write if there is an error.

02:32:30.159 --> 02:32:52.420
In that case, we want to return some Jsx more specifically, a div Really similar to this one, it's going to be a div a user message but instead of loading users, we're going to say error loading please refresh and try again but make sure that that is inside of the list container.

02:32:52.760 --> 02:32:58.640
So I wrap that inside of the list container and it's going to be just like this.

02:32:59.200 --> 02:33:01.719
In this case, we cannot see that arrow because we have users.

02:33:02.000 --> 02:33:06.559
but if we didn't have any or if there were some connection issues then we would see that error.

02:33:07.680 --> 02:33:16.119
And one more thing is we're going to copy this entire if statement and just change the error part to be equal to list empty.

02:33:16.799 --> 02:33:25.439
So if our list is empty in that case, we simply want to say no Users found great.

02:33:25.729 --> 02:33:37.440
We have the loading states, we have the no user state, the error state and if everything works out, we are displaying our users and we can toggle the user invite, on or off.

02:33:38.079 --> 02:33:40.319
That was it for our user list.

02:33:40.692 --> 02:33:44.914
It was such a long component but now we can go back to our create channel.

02:33:45.222 --> 02:33:51.573
We can remember what we had the name, add members there is the name and there is the add members.

02:33:52.079 --> 02:33:58.559
And finally we can add a button to make an invite of the user to our channel to create a channel.

02:33:58.826 --> 02:34:13.493
We just need to add one more div below the user list and that's going to be a div with the class name equal to create Dash Channel underscore, underscore button, dash wrapper inside of that div.

02:34:13.724 --> 02:34:23.440
We're going to have a P tag and that p tag is going to check on what is the create type and if it's currently team.

02:34:23.920 --> 02:34:27.359
In that case we want to say create Channel.

02:34:28.559 --> 02:34:36.053
Otherwise we want to say create message group Great! Let's save it and check it out.

02:34:36.346 --> 02:34:44.079
As you can see, there is our button at the bottom and now we just have to add the on click property to this div.

02:34:44.639 --> 02:34:52.297
So on click let's do something like a create Channel function just below these use states.

02:34:52.571 --> 02:34:56.582
We're going to create a const Create Channel function.

02:34:56.925 --> 02:35:06.099
It's going to be an Async function and we are going to get the event as the first parameter inside of there.

02:35:06.429 --> 02:35:15.319
We can first say event or E dot prevent default not to do a browser reload and then finally we'll have to create a new channel.

02:35:16.000 --> 02:35:25.413
We can do that by first opening a try and catch block to make sure nothing goes wrong and this is how we create a new channel.

02:35:25.840 --> 02:35:32.000
New channel is going to be equal to await client dot channel.

02:35:32.879 --> 02:35:35.779
and that's going to be the function that's going to create a channel.

02:35:36.039 --> 02:35:39.097
We have to pass a few options into it.

02:35:39.520 --> 02:35:42.159
First of all, we have to pass the create type.

02:35:42.426 --> 02:35:58.528
Is it a messaging channel? Is it a theme channel? Then we have to pass a channel name and finally we have to pass an object that's going to contain the name as the channel name and also the members.

02:35:59.120 --> 02:36:00.799
And this is the most important part.

02:36:01.079 --> 02:36:04.959
As members, we're going to add our own selected users.

02:36:06.318 --> 02:36:19.440
Great! Once we finally created the channel, we can just say await New Channel dot Watch We want to keep watching that channel we want to see whenever there's a new message in that channel.

02:36:19.920 --> 02:36:23.360
And finally once the channel is created, let's do a clean up.

02:36:23.680 --> 02:36:25.360
First we're going to reset that field.

02:36:25.639 --> 02:36:29.222
If we go here, you can see there's a field with the channel name.

02:36:29.565 --> 02:36:36.520
So let's reset that that's going to be set channel name equal to an empty string.

02:36:37.040 --> 02:36:44.271
Then we're gonna set is creating to be false because we're no longer creating a channel, we just created one.

02:36:44.719 --> 02:36:56.982
Then we're going to reset the set selected users so we can say set selected users and we're going to reset that back to an array containing only us one more time.

02:36:57.371 --> 02:37:02.493
So client dot, user id We always want to be there in the channels we create.

02:37:02.879 --> 02:37:11.280
And then finally we're going to switch that channel by saying set active channel is going to be equal to to the new channel.

02:37:12.398 --> 02:37:18.179
And finally, if we have an error, we simply want to do console.log right there.

02:37:18.918 --> 02:37:25.020
Console.log Error Great! This is going to be it for the entire channel creation process.

02:37:25.760 --> 02:37:33.413
Now we should be able to finally see what channels and direct messages we have right here on our lists.

02:37:33.840 --> 02:37:35.689
So let's go under new channel.

02:37:36.059 --> 02:37:39.020
So right now I'm going to maximize this window.

02:37:39.389 --> 02:37:41.209
We are going to go under channels.

02:37:41.500 --> 02:37:50.079
I'm going to name the channel something like Doctors Meeting and let's invite Javascript mastery.

02:37:50.719 --> 02:37:52.255
Let's create a new channel.

02:37:52.639 --> 02:37:53.977
And there we go.

02:37:54.422 --> 02:37:55.314
We are in.

02:37:55.760 --> 02:38:00.328
Let's send a first message, something like hello and as you can see Dr.

02:38:00.684 --> 02:38:02.360
Smith the message is there.

02:38:02.800 --> 02:38:08.656
Unfortunately, the channel didn't seem to appear on the left side, so we need to see what's up with that.

02:38:08.994 --> 02:38:14.399
Also, if we go here under edit, you can see that we still haven't implemented the edit feature.

02:38:14.959 --> 02:38:22.958
Now let's reload and unfortunately, yeah, there still is not a doctor's meeting channel on the left side.

02:38:23.439 --> 02:38:26.227
If we tried searching, still nothing happened.

02:38:26.661 --> 02:38:30.759
So these are the things that we have to fix to make this work fully.

02:38:31.119 --> 02:38:38.551
The channel was indeed created and we can verify that in the Get Stream dashboard, but we still cannot see it on the left side.

02:38:38.853 --> 02:38:40.840
so let's fix that right away.

02:38:41.234 --> 02:38:50.981
to make our channels and direct messages appear, we can go back to our channel list container inside of here if we scroll down.

02:38:51.359 --> 02:38:55.553
We left our filters to be empty so we are not filtering any data.

02:38:55.861 --> 02:39:00.560
We're not trying to look for any channels, so let's fix that right away.

02:39:01.120 --> 02:39:06.025
So first in here we have the sidebar, then we have the company header.

02:39:06.398 --> 02:39:08.932
After that, let's create some filters.

02:39:09.439 --> 02:39:23.810
So right here I'm going to say const custom Channel Team filter and that's going to be a function and as a parameter we're going to get a list of all the channels there.

02:39:24.220 --> 02:39:34.915
we can return channels dot Filter So we want to filter out the channels and we get each specific channel and which ones do we want to leave out.

02:39:35.200 --> 02:39:45.542
Well, we want to keep only the ones where the channel dot type is triple equal to team because this is our team filter.

02:39:46.159 --> 02:39:59.920
Now we're going to copy that same function and we're going to call this one custom channel not theme but rather messaging filter and we're going to set the channel type to messaging.

02:40:00.719 --> 02:40:32.299
Great! Now where can we use those filters That's going to be here in channel Render Filter Function In here we can simply say custom channel theme filter and for the second channel list right here we are simply going to paste custom channel theme filter but this time it's going to be messaging Okay now that we have the channel render filters before we fill in the other types of filters, we need to do some quick renaming.

02:40:32.629 --> 02:40:36.927
I've made a mistake when calling this component the Channel list container.

02:40:37.520 --> 02:40:41.920
This one should be called the Channel list content.

02:40:42.260 --> 02:40:51.103
So this is just the content for our container and then the actual component is going to be below and we can create it right here.

02:40:51.520 --> 02:40:56.182
That is going to be const Channel list container.

02:40:56.605 --> 02:41:03.599
That's going to be a functional component and inside of there we can of course do some logic.

02:41:04.318 --> 02:41:07.493
These props are going to be in curly braces.

02:41:08.000 --> 02:41:18.239
Set, create type, Also, Set is creating and finally, Set is editing great.

02:41:18.586 --> 02:41:24.453
Now we're passing these three props and we're going to have just one more state value.

02:41:25.200 --> 02:41:31.108
This channel list container is going to give us the logic for that sweet animation you saw for mobile devices.

02:41:31.474 --> 02:41:35.359
So we need to be able to toggle the container based on the width of the screen.

02:41:35.959 --> 02:41:43.103
So let's create a use state field and let's call it toggle.

02:41:43.840 --> 02:41:47.109
Great! We have to import the use state at the top.

02:41:47.419 --> 02:42:00.089
So right here we're going to import use state and let's scroll down the initial state for the set toggle container is going to be set to false.

02:42:00.398 --> 02:42:02.879
Also, make sure to put a capital T right there.

02:42:04.000 --> 02:42:11.062
So what Jsx Are we going to return from here? Inside of the return, we are going to return a react fragment.

02:42:11.577 --> 02:42:32.879
Inside of that fragment, we can return a Div and this div is going to have a class name equal to channel dash list, underscore, underscore container, and inside of there we can render our channel list content.

02:42:34.639 --> 02:42:39.484
Of course, we were using some props in our channel list content as you can see right there.

02:42:39.768 --> 02:42:46.959
so we have to make sure to pass all of the props from our channel list container to the channel list content.

02:42:48.398 --> 02:42:54.398
Of course we have to space everything out properly and then set the equal values to be equal to the names themselves.

02:42:54.739 --> 02:42:57.959
We can do that by using some shortcut magic.

02:42:58.799 --> 02:43:03.440
There we go and we can do the same thing for set is editing.

02:43:04.079 --> 02:43:04.879
There we go.

02:43:05.279 --> 02:43:08.790
The only thing we don't have to pass here is the is creating property.

02:43:09.139 --> 02:43:11.386
We need just these three.

02:43:12.159 --> 02:43:26.185
Great! Now below this div, we are going to have one more Div and this div is going to have a class name equal to channel dash list, underscore, underscore, container Dash Responsive.

02:43:27.439 --> 02:43:34.079
So this one is only going to be visible when we are on mobile devices, so we are going to give it some inline styles.

02:43:35.120 --> 02:43:43.600
More specifically, style is equal to left toggle container and that is going to be either zero percent.

02:43:44.000 --> 02:43:55.040
So let's put that here zero percent or that's going to be something like let me put it like this: something like minus 89.

02:43:56.799 --> 02:43:58.549
I found this value to work the best.

02:43:58.799 --> 02:44:04.303
Basically, it's going to pull from the left side to the right and it's going to have 11 of the width.

02:44:04.799 --> 02:44:14.462
Finally, we need to give it a background color so you can say background is equal to and that's going to be hexadecimal string 005 Ff.

02:44:15.470 --> 02:44:17.507
Great! Now we have everything.

02:44:17.850 --> 02:44:20.415
It is complaining about the toggle container variable.

02:44:20.799 --> 02:44:24.119
because I have this column here, we don't need that.

02:44:24.719 --> 02:44:32.772
With that, we created our div and we need to have one more div inside of it so we can create the final div here.

02:44:33.279 --> 02:44:47.732
This div is going to have a class name equal to channel dash list, underscore, underscore container, dash toggle and it's also going to have the on click property on click.

02:44:48.025 --> 02:44:56.079
We are going to simply call a function set toggle container and we want to toggle it off.

02:44:56.359 --> 02:45:05.405
So as we discussed, we are going to get the previous toggle container and we're simply going to return not pref toggle container.

02:45:05.873 --> 02:45:16.159
That's how we toggle values in react state and finally below this div we just created, we're going to add our channel list content.

02:45:16.548 --> 02:45:19.219
We can basically copy what we had here.

02:45:19.559 --> 02:45:25.279
So this same thing, let's simply copy and paste it here and we're going to add one more prop to it.

02:45:25.501 --> 02:45:30.398
This time, that's going to be the set toggle container is equal to set Toggle container.

02:45:30.707 --> 02:45:40.066
So why do we have two different divs with two of the same components? This one is for the desktop version and this one is happening on mobile.

02:45:40.639 --> 02:45:45.942
Great! So now we have two different versions, the channel list content and the same channel list content.

02:45:46.228 --> 02:45:51.280
but the one for the responsive version where we're passing the set toggle container.

02:45:51.760 --> 02:45:53.600
We are going to use that in just a moment.

02:45:53.931 --> 02:46:02.186
But for now, let's finish these filters right here and here so that we can actually see the channels in action.

02:46:02.799 --> 02:46:07.427
So to get these channels, we're going to get something from the use context.

02:46:07.953 --> 02:46:23.600
So right here at the top of the channel list content, I'm going to say const lowercase and we want to get the client object that's going to be equal to use chat context.

02:46:25.120 --> 02:46:40.933
So once we get this client, then we can create the filters object and we can say const filters is equal to an object and then in there we can say members colon that's going to be an object and we want to say dollar sign in.

02:46:41.235 --> 02:46:54.959
That means included And there We can simply say client dot user Id So that means that we want to get all of the channels and direct messages where our user is included.

02:46:56.079 --> 02:47:04.666
Great! Now we can copy that variable and paste it right here instead of this empty object and right there in the channel list as well.

02:47:05.120 --> 02:47:07.360
Now let's save it and check it out.

02:47:07.680 --> 02:47:15.413
And as you can see the cardiology we previously created that was the demo chat and the doctors meeting channels are now here.

02:47:15.920 --> 02:47:19.211
We cannot yet switch between those, but we're going to implement that soon.

02:47:19.485 --> 02:47:23.466
but for now, we are at least seeing them on the left side.

02:47:24.079 --> 02:47:27.589
We don't yet have any direct messages, but let's try to create some.

02:47:27.859 --> 02:47:33.879
Let's try to invite Javascript mastery, create message group and let's say hello.

02:47:34.478 --> 02:47:35.279
There we go.

02:47:35.679 --> 02:47:39.520
Something happened, but it doesn't look like a real direct message yet.

02:47:39.737 --> 02:47:45.413
We'll have to look into this component and see if we've created everything correctly for the direct message output.

02:47:45.866 --> 02:47:53.000
With that said, let's finish the left side with the mobile toggle for the responsive view so we can do that.

02:47:53.229 --> 02:48:06.680
Considering that we are now passing this set toggle container variable to the channel list, so if we scroll a bit up, you'll see that there is our channel list content and then in there we can simply get the set toggle container.

02:48:07.680 --> 02:48:26.106
Now, we can pass that variable deeper into the theme channel list right here and we need to pass it in a few more places like into the theme channel preview and we have to copy the same procedure right here as well for the team channel list and Team Channel preview down below.

02:48:26.799 --> 02:48:34.136
Now that we are passing those values to the team channel list and the theme channel preview, let's see where we have to pass them to make it work.

02:48:34.478 --> 02:48:41.280
So right here at the top, we can get one more prop which is going to be called set toggle container.

02:48:42.079 --> 02:48:49.885
Now that we're passing the set toggle container, we can go inside of the theme channel list and team channel preview to see where we need to use them.

02:48:50.159 --> 02:48:54.986
First of all, we can accept them here as a prop at the top and then right here.

02:48:55.288 --> 02:48:59.180
we can pass it over to the add channel by simply doing set.

02:48:59.520 --> 02:49:02.159
Toggle container is equal to set toggle container.

02:49:03.600 --> 02:49:09.497
Now if we go back to the channel list container, we can go to the preview theme channel preview.

02:49:09.965 --> 02:49:12.440
We are passing it going there.

02:49:13.040 --> 02:49:28.788
We can also get it right here from the props and in this case we'll have to do something on click and as you can see, this is another feature we are yet to implement clicking on a specific channel to open the messages for that channel.

02:49:29.165 --> 02:49:32.000
So while we're here, let's make that work right away.

02:49:32.302 --> 02:49:41.199
To make that work, we also have to make use of all of the other props we are passing into this and right now we are not passing any.

02:49:41.599 --> 02:49:45.680
So what do we need to pass? Well, that is going to be the same once we're passing here.

02:49:46.478 --> 02:49:51.137
Set is creating, Set is editing and that's going to be it.

02:49:51.341 --> 02:49:55.840
So I'm going to copy these two and simply paste them here.

02:49:56.959 --> 02:49:59.976
Set is creating and Set is editing.

02:50:00.478 --> 02:50:13.101
Now we can go back to the Team Channel Preview Get the Set is creating and also Set is editing and finally we can use those value to preview a channel.

02:50:13.492 --> 02:50:18.514
So we need to call Set is creating and set that to false.

02:50:18.959 --> 02:50:23.626
Because we are no longer creating a channel, we want to see the messages for a specific channel.

02:50:24.159 --> 02:50:27.135
Then if we're currently editing, we don't want to do that anymore.

02:50:27.319 --> 02:50:33.359
We want to see a specific channel and then finally we want to see if the Set toggle container exists.

02:50:33.769 --> 02:50:50.239
So Set Toggle Container and if it does, we want to call it as a function Set Toggle Container Remember we are going to get a previous state and we can simply do not previous state.

02:50:50.959 --> 02:50:57.851
So we are doing this if because on our desktop devices we won't have this set toggle container but on mobile we will.

02:50:58.239 --> 02:51:00.159
So we want to toggle it on and off.

02:51:00.399 --> 02:51:12.559
and then finally we have to set the active channel and we can get the value for that right here From the Props Set Active Channel and we simply need to call it right there.

02:51:13.439 --> 02:51:18.559
Set Active Channel and we pass in the channel variable.

02:51:19.840 --> 02:51:24.299
This should allow us to switch between the channels before we go ahead and check it out.

02:51:24.530 --> 02:51:33.639
Let's first go to the Channel list container and make sure that we have these props right there also in the upper preview because they should be the same.

02:51:34.000 --> 02:51:36.519
So right here I'm going to copy these.

02:51:36.879 --> 02:51:42.450
That's going to be set, is creating set is editing and set toggle container and paste them right here.

02:51:42.760 --> 02:51:45.040
These have to be the same now.

02:51:45.216 --> 02:51:46.799
let's save it and take a look in the browser.

02:51:48.079 --> 02:51:57.167
Now we're currently on the direct message to Javascript Mastery, but if I switch to Cardiology, you can see we successfully switched to another channel.

02:51:57.840 --> 02:52:02.586
We can also go to the doctor's meeting and damn is it nice to see how everything is working.

02:52:02.880 --> 02:52:02.880
well.

02:52:03.173 --> 02:52:07.972
we have doctors meeting cardiology and then we have direct messages.

02:52:08.799 --> 02:52:14.959
Now that we can create new channels, also create new messages and switch between the channels.

02:52:15.600 --> 02:52:21.933
Let's see what's happening with the styles of our direct messages and then we're going to implement the edit channel functionality.

02:52:22.346 --> 02:52:28.570
It won't be that hard as you can see most of the logic for everything has already been done.

02:52:29.004 --> 02:52:34.559
so let's keep it going to figure out what's happening with our direct channel preview.

02:52:34.959 --> 02:52:39.359
We can go into Team channel preview and then right in here.

02:52:39.618 --> 02:52:45.039
This is the channel preview for the channels and this is the preview for direct messages.

02:52:45.439 --> 02:52:51.786
So in here we're looping over the members and then we're showing the image and the full name for the member.

02:52:52.071 --> 02:52:54.239
but for some reason this is not getting displayed.

02:52:55.439 --> 02:53:00.099
So let's simply console.log members 0 right here.

02:53:00.429 --> 02:53:06.129
so that's going to be Members 0. Let's see how our user looks like.

02:53:06.559 --> 02:53:16.479
So if we open up the console we can inspect and right here we can have two different objects and this is going to be the Javascript Mastery user.

02:53:17.520 --> 02:53:23.079
Javascript Mastery is going to be the only account ever on this platform that we haven't created ourselves.

02:53:23.466 --> 02:53:36.900
All the other accounts are going to be created using the sign up and the sign in form, but this is the default stream account and unfortunately this one doesn't have the full name property.

02:53:37.520 --> 02:53:54.159
So what we can do to fix this is we can simply right here say or members 0 and then we can use the Id So that's going to be question mark dot, user question mark dot and that's going to be Id.

02:53:54.471 --> 02:54:00.589
So we either show the full name or we show the Id and if we go back, take a look at that.

02:54:00.814 --> 02:54:03.799
We have a little J thing there and Javascript Mastery.

02:54:04.639 --> 02:54:08.139
But now let's actually test this out with a real user.

02:54:08.559 --> 02:54:10.478
Of course right now we're logged in as Dr.

02:54:10.807 --> 02:54:14.648
Smith, but we need another user to be able to chat with him.

02:54:14.950 --> 02:54:18.079
So let's log out and create one more account.

02:54:18.559 --> 02:54:23.840
I'm going to close this click log out and right now let's create another doctor.

02:54:24.879 --> 02:54:26.543
Let's do something like Dr.

02:54:26.959 --> 02:54:28.639
Miller Dr.

02:54:29.099 --> 02:54:30.019
Miller as well.

02:54:30.478 --> 02:54:32.811
Phone number is not important for now.

02:54:33.200 --> 02:54:37.440
We can enter the same avatar url and the password can be something simple.

02:54:37.799 --> 02:54:39.120
Let's click sign up.

02:54:39.600 --> 02:54:45.120
as you can see there are no channels yet, but let's create a direct message with Dr.

02:54:45.451 --> 02:54:45.451
Smith.

02:54:45.782 --> 02:54:49.946
I'm going to click create message group and there we go.

02:54:50.355 --> 02:54:51.990
We only have an Id.

02:54:52.398 --> 02:54:59.479
Unfortunately, there doesn't seem to be a full name so let's open up the stream dashboard and see what's happening.

02:54:59.920 --> 02:55:09.545
If you go to the dashboard.get you are going to be on your app overview, but we can go to the app Explorer right here.

02:55:09.812 --> 02:55:14.351
You should be able to see all the users and let's check it out.

02:55:14.719 --> 02:55:16.208
There is our Dr.

02:55:16.703 --> 02:55:21.359
Miller looks like that, he has his username here and here's our Dr.

02:55:21.705 --> 02:55:21.705
Smith.

02:55:22.052 --> 02:55:33.023
The full name is there as well, but let me show you something once we actually log out and try to log in one more time as Dr.

02:55:33.439 --> 02:55:38.119
Miller and then I'm going to enter the password, log in.

02:55:38.639 --> 02:55:40.379
as you can see nothing is there.

02:55:40.669 --> 02:55:41.724
same thing as before.

02:55:42.106 --> 02:55:45.492
But now if I go here and I visit Dr.

02:55:45.857 --> 02:55:49.471
Miller, the full name is actually going to be empty.

02:55:49.920 --> 02:55:53.314
Why was this string cleared? Well, let's check it out.

02:55:53.622 --> 02:55:57.370
So what's happening is that we have a small mistake in the Auth component.

02:55:57.713 --> 02:56:04.319
When we log in, we're filling in these values the username, full name, user id, and token.

02:56:04.879 --> 02:56:13.039
But think about it, if the user is logging in, he won't have to type in his full name, Therefore, it's going to remain as an empty string.

02:56:13.439 --> 02:56:20.398
So instead of getting the full name here, what we can do is just get it from the data that's returned back from the database.

02:56:21.520 --> 02:56:23.635
So here we can get the full name.

02:56:23.937 --> 02:56:31.439
but then on the sign up when we're sending the data to the database here, it has to be form dot full name.

02:56:31.741 --> 02:56:35.581
So this is the data from our input only on the sign up.

02:56:35.937 --> 02:56:37.581
Great! That part is now fixed.

02:56:37.803 --> 02:56:40.568
So let's try to create a new user and test it out.

02:56:40.870 --> 02:56:42.079
I'm going to log out.

02:56:42.479 --> 02:56:44.879
Let's try to sign up as Dr.

02:56:45.279 --> 02:56:45.279
James.

02:56:46.478 --> 02:56:48.292
That's going to be Dr.

02:56:48.746 --> 02:56:48.746
James.

02:56:49.200 --> 02:56:55.225
We can use the same avatar and password and I'm just going gonna click sign up now that the Dr.

02:56:55.501 --> 02:56:58.017
James was created and we sent a message to Dr.

02:56:58.301 --> 02:56:58.301
Smith.

02:56:58.585 --> 02:57:00.183
Let's try to log in as Dr.

02:57:00.431 --> 02:57:02.879
Smith and see if the issue has been resolved.

02:57:03.359 --> 02:57:06.559
So I'm going to log out and sign in as Dr.

02:57:06.951 --> 02:57:06.951
Smith.

02:57:07.342 --> 02:57:08.124
There we go.

02:57:08.515 --> 02:57:11.680
Our issue was fixed because we can now see Dr.

02:57:12.000 --> 02:57:14.039
James right there to test it out properly.

02:57:14.319 --> 02:57:17.887
Let's log out one more time and log in as Dr.

02:57:18.263 --> 02:57:18.263
James.

02:57:18.639 --> 02:57:20.524
So that's going to be Dr.

02:57:20.902 --> 02:57:20.902
James.

02:57:21.279 --> 02:57:22.238
And there we go.

02:57:22.558 --> 02:57:23.838
Now we can see Dr.

02:57:24.158 --> 02:57:24.819
Smith once again.

02:57:25.159 --> 02:57:25.499
That's great.

02:57:25.839 --> 02:57:31.438
I'm going to log out and finally one more time bear with me to test this out properly.

02:57:31.679 --> 02:57:33.958
We're going to log in as Dr.

02:57:34.478 --> 02:57:36.959
Smith and then I'll see how it looks like.

02:57:38.559 --> 02:57:39.493
There we go, Dr.

02:57:39.804 --> 02:57:40.737
James is still there.

02:57:41.048 --> 02:57:42.709
We can ignore this person right there.

02:57:42.979 --> 02:57:46.228
or as a matter of fact, I'm going to delete everybody who's not Dr.

02:57:46.571 --> 02:57:47.257
Smith and Dr.

02:57:47.600 --> 02:57:52.090
James because we had an issue that caused their data to be corrupted.

02:57:52.460 --> 02:57:55.439
So I'm going to hard delete this user right there.

02:57:55.759 --> 02:58:00.890
and from now on, we shouldn't have absolutely any problems while we're there.

02:58:01.176 --> 02:58:04.453
Let's also delete all of the channels that we have.

02:58:04.879 --> 02:58:08.729
I've deleted all of the channels besides the ones that have proper names.

02:58:09.019 --> 02:58:15.327
So now if we go here, you can see that we can switch between the channels and let's try out the direct messages.

02:58:15.760 --> 02:58:17.582
I can try to message Dr.

02:58:17.946 --> 02:58:21.760
James and say something like hello and there we go.

02:58:22.133 --> 02:58:22.133
Dr.

02:58:22.506 --> 02:58:24.000
Smith said hello to Dr.

02:58:24.639 --> 02:58:24.639
James.

02:58:25.279 --> 02:58:25.920
That's great.

02:58:26.559 --> 02:58:31.296
That means that our direct messages, our channels switching between the channels.

02:58:31.840 --> 02:58:34.039
Everything seems to be working great.

02:58:34.478 --> 02:58:38.273
One thing that we still have to do is fix the edit channel functionality.

02:58:38.662 --> 02:58:44.288
So if we want to go to cardiology and add a new user, we need to be able to do that.

02:58:44.559 --> 02:58:46.822
Right now, our edit channel is empty.

02:58:47.200 --> 02:58:47.920
so let's do that.

02:58:48.159 --> 02:58:54.064
And then we're getting close to the end where we're going to implement Sms notifications using Twilio.

02:58:54.799 --> 02:58:56.335
So let's keep it going.

02:58:56.719 --> 02:59:00.616
Let's close all of our files and folders to have a clean working environment.

02:59:00.947 --> 02:59:06.579
and let's go to client source components and then finally Edit Channel.

02:59:07.200 --> 02:59:10.213
This is the component we need to focus on right now.

02:59:10.799 --> 02:59:16.034
Inside of the edit channel, we're going to import React as well as the use state.

02:59:16.478 --> 02:59:24.520
Then we're also going to import the Use Chat context that is coming from Stream Chat React.

02:59:25.520 --> 02:59:29.484
We are also going to need one more component and it's the one we already coded out.

02:59:29.768 --> 02:59:31.760
It is going to be the user list.

02:59:32.639 --> 02:59:46.079
Remember we use the user list to create a new channel and we'll say from that's going to be dot slash and finally we're going to need one more thing from the assets and that's going to be close.

02:59:46.525 --> 02:59:52.212
Create Channel That's going to be coming from dot slash assets.

02:59:53.120 --> 02:59:57.200
The first thing we're going to add in here is going to be a channel name input component.

02:59:57.640 --> 03:00:01.972
And if you remember correctly, we already created something like that.

03:00:02.398 --> 03:00:10.655
So we can go to create channel component and simply copy the channel name input, go back to edit and paste it at the top.

03:00:10.959 --> 03:00:13.634
We are going to reuse this component.

03:00:14.079 --> 03:00:16.478
Now let's start with working on the edit channel.

03:00:17.359 --> 03:00:40.279
Our edit channel is going to have a Div that's going to have the class name equal to edit, Dash Channel, underscore, underscore container, and inside of there we are going to have one more div and this div is going to have a class name equal to Edit Dash Channel underscore underscore header.

03:00:41.200 --> 03:00:57.247
Inside of that div, we can put a paragraph so let's put a P tag and we can simply say edit channel Now let's also put a close icon so we can say close create channel icon and in there we have to pass.

03:00:57.535 --> 03:01:09.211
the set is editing prop as set is editing this prop we are receiving from the props at the top so we can simply destructure it from the props right here.

03:01:09.680 --> 03:01:16.219
Now below this div, we are going to call the component we created above, which is the channel name input.

03:01:16.799 --> 03:01:32.500
So that's going to be channel name input, a self-closing component and we have to pass in the channel name as channel name and we also have to pass the set channel name as set channel name.

03:01:33.040 --> 03:01:36.819
So you might be wondering where are we getting these values from.

03:01:37.359 --> 03:01:47.920
Well, we can get the channel name from the chat context so we can say cons in curly braces channel and that's going to be equal to use chat context.

03:01:49.439 --> 03:01:54.489
Then for the channel name or set channel name, we can create a use state field.

03:01:54.879 --> 03:02:14.639
So right here we can say use state channel name also set channel name and the default value is going to be equal to channel question mark, dot data question mark dot name So if there is already a channel name, we'll try to get it from the channel.

03:02:14.991 --> 03:02:22.959
I've noticed that I've misspelled the name here that's going to be channel name and now we have both the channel name and the set channel name.

03:02:23.359 --> 03:02:26.292
The last thing we have to do is render out the user list.

03:02:26.603 --> 03:02:29.600
So right here we can say user list.

03:02:30.799 --> 03:02:34.457
It is a self-closing component and in there we can simply pass.

03:02:34.811 --> 03:02:40.491
Set selected users is equal to set selected users and again selected users.

03:02:40.788 --> 03:02:44.639
and the set selected users are state fields which we don't have already.

03:02:44.959 --> 03:02:56.840
So let's create a new use state field and we're going to create our selected users and also set selected users with the default value equal to an empty array.

03:02:57.245 --> 03:03:02.148
Great! Now we have the header, channel name input and the user list.

03:03:02.559 --> 03:03:06.599
Let's just add a button to save the changes and we are almost done.

03:03:07.040 --> 03:03:21.874
So it's going to be a div with a class name equal to edit, dash, channel, underscore, underscore button, dash wrapper and inside of there we can simply say something like Ap tag.

03:03:22.205 --> 03:03:36.097
That's going to say save changes, let's save it and see how does it look like If we go back you can see this looks similar to what we had with the creation of the channels because we are using most of the same components.

03:03:36.382 --> 03:03:51.519
So now if we switched to the doctor's meeting you can see we can invite new users direct messages don't have the added channel because they are not channels but cardiology and doctors meeting have them and we can invite new users or simply change the name.

03:03:51.920 --> 03:03:58.035
Great! Finally, the button doesn't do anything yet so let's go ahead and create a function that's going to save the changes.

03:03:58.311 --> 03:04:03.040
We are going to add the on click on this button or a Div and on click.

03:04:03.420 --> 03:04:06.548
We simply want to call the update channel function.

03:04:07.016 --> 03:04:17.528
We can declare it right here Const: update channel and that is going to be an async function inside of there.

03:04:17.733 --> 03:04:24.319
We are going to get the event and as always let's call the event dot prevent default.

03:04:25.600 --> 03:04:28.440
Now let's see if the user has changed the name.

03:04:28.959 --> 03:04:47.705
We can say const name changed and that's going to be equal to if channel name is not equal to in parentheses channel dot data dot name or channel dot data dot Id.

03:04:48.398 --> 03:05:10.318
That means that the name has been changed so if name has been changed inside of the if we can simply say await channel dot update and then inside of there we can pass an object with what we want to update and the thing we want to update is going to be the name to channel name.

03:05:11.279 --> 03:05:53.200
We can also set the text for the update so in a new object as a second parameter we're going to say text is equal to a template string channel name changed to and then in here we can say simply channel name great Finally, if the name hasn't changed but if the number of users has changed so if selected user is that length meaning if we added some new users in that case we want to await channel dot, add members and simply pass in the selected users.

03:05:54.799 --> 03:05:56.666
that is going to be it.

03:05:57.040 --> 03:06:02.977
And once we're done we have to set channel name back to now.

03:06:03.386 --> 03:06:18.639
We also have to set is editing back to false because we're done with the editing and finally we have to set selected users to be equal to an empty array and with that we are done with the edit functionality.

03:06:19.005 --> 03:06:21.200
Let's go ahead and try it out.

03:06:21.440 --> 03:06:30.265
Let's try to go to the doctor's meeting and let's try to change it to something like emergency and I'll also try to add Dr.

03:06:30.603 --> 03:06:30.603
James.

03:06:30.941 --> 03:06:34.899
I'm gonna click save changes and there we go.

03:06:35.279 --> 03:06:39.732
Channel name change to Emergency at Friday at 6 Pm.

03:06:40.318 --> 03:06:43.279
Great! That means that this part works perfectly.

03:06:44.398 --> 03:06:52.408
As you can see, our application is getting better and better and it seems like we have a fully working chat by now.

03:06:52.799 --> 03:06:59.280
I know this was a long video so if you're still here and watching, definitely make sure to leave a like and comment down below.

03:06:59.920 --> 03:07:04.408
With that said, let's check if our search is working so I'll try to search for Dr.

03:07:04.719 --> 03:07:08.453
James, but unfortunately nothing seems to be coming up.

03:07:08.826 --> 03:07:11.386
Let's see what's happening with our search.

03:07:11.920 --> 03:07:21.879
We can look into our search by going to the channel search component and would you look at that? We even left ourselves a to do right inside of here.

03:07:22.318 --> 03:07:24.719
So in the channel search let's make it work.

03:07:25.600 --> 03:07:31.131
What we have to do is we have to use this chat context to get the information about the active channel.

03:07:31.508 --> 03:07:45.319
So right there we can say const and then the structure, the values client and also set active channel and this is coming from equal to use chat context.

03:07:46.239 --> 03:07:53.346
Great! We also have the query and the loading but we're going to add a few more use states that we're going to need.

03:07:53.680 --> 03:08:00.028
For example, I'm going to write use state and we are going to need team channels.

03:08:00.398 --> 03:08:06.853
We need to know which are the currently active team channels and at the start that's going to be set to an empty array.

03:08:07.120 --> 03:08:14.628
Then I'm going to duplicate that and then we're also going to add direct channels and set direct channels.

03:08:15.017 --> 03:08:21.520
We need to know which are the currently active direct channels also at the start equal to an empty array.

03:08:22.879 --> 03:08:27.029
Now that we have all of these used state fields, let's make our get channels function work.

03:08:27.420 --> 03:08:30.779
So inside of the try block let's query our channels.

03:08:31.119 --> 03:08:45.239
We can do that by saying const channel response is going to be equal to client dot query channels and then inside of there we need to pass some options.

03:08:46.079 --> 03:08:50.639
The first thing we have to specify is the type which is going to be equal to team.

03:08:52.000 --> 03:08:58.119
Then just next to that we can specify a name which has to be equal to dollar sign.

03:08:58.799 --> 03:09:10.113
Auto complete is equal to text so we want to autocomplete all the usernames and then finally the third thing next to the name is going to be members.

03:09:10.478 --> 03:09:12.929
And for members, we can say dollar sign.

03:09:13.279 --> 03:09:26.175
Dollar In is equal to an array where we have the client dot user Id make sure that the user is lowercased and the Id all uppercased.

03:09:26.719 --> 03:09:31.519
Let's space this in a few rows and this is how it looks like query channels.

03:09:31.878 --> 03:09:39.023
Type is theme, name is autocompletetext, and members includes our own user id.

03:09:39.760 --> 03:09:41.315
Now let's also query the users.

03:09:41.626 --> 03:09:52.399
We can do that by saying const user response is equal to client dot query users and it's the same situation.

03:09:52.760 --> 03:09:56.506
We have an object where we pass some information.

03:09:57.040 --> 03:10:05.133
So first we can say Id is equal to and then an object and then dollar sign and e.

03:10:05.600 --> 03:10:08.982
This is going to make sure that we exclude our current user id.

03:10:09.427 --> 03:10:14.064
We don't want to find ourselves on the search but rather next to it.

03:10:14.360 --> 03:10:18.359
We can say name is equal to and we can copy this autocomplete text.

03:10:18.639 --> 03:10:21.599
So we want to get all the other names.

03:10:22.238 --> 03:10:22.839
There we go.

03:10:23.139 --> 03:10:28.888
Now we have the user response and we also have channel response and let's see what we can do with that.

03:10:29.137 --> 03:10:34.693
We want to put that into a promised at all because we want to start fetching them at the same time.

03:10:35.040 --> 03:10:58.453
So what we can do is say const and then square brackets Inside of here we are going to have channels and also in curly braces users So we want to get the channels and the users at the same time and we can do that by saying equal, await, promise dot all and then inside of there inside of an array.

03:10:58.711 --> 03:11:05.055
We want to get the channel response and also the user response.

03:11:05.760 --> 03:11:06.809
So this is an interesting way.

03:11:07.019 --> 03:11:07.439
We did this.

03:11:07.679 --> 03:11:12.866
We could have just put the await in front of this one and in front of this one.

03:11:13.200 --> 03:11:19.680
but that way if we make a request we'll have to wait for this one to be done and then only start this one once this is done.

03:11:20.719 --> 03:11:29.653
but this way we'll be starting both of these requests at the same time they will be happening simultaneously so that's going to make it quicker.

03:11:30.000 --> 03:11:34.079
So finally, let's see if we have any channels that length.

03:11:34.639 --> 03:11:36.047
Meaning if the channels exist.

03:11:36.398 --> 03:11:41.440
In that case, we want to set team channels to be equal to channels.

03:11:42.000 --> 03:11:49.520
We'll do a similar thing for the users and say if user is that length then we want to set direct channels equal to users.

03:11:50.478 --> 03:11:55.026
If you think about it, a direct channel is nothing more than a user.

03:11:55.520 --> 03:11:59.438
Great! This is our get channels function Completely done.

03:12:00.478 --> 03:12:02.656
Finally we have to make use of it.

03:12:02.967 --> 03:12:08.000
So just below this input, we are going to create last component of our entire project.

03:12:08.386 --> 03:12:09.932
At least I think so.

03:12:10.318 --> 03:12:18.000
So right here we want to open a dynamic code block and we want to specify if the query exists.

03:12:19.120 --> 03:12:22.079
So if the query exists meaning our search term.

03:12:22.719 --> 03:12:25.919
In that case, we want to do something like this.

03:12:26.239 --> 03:12:29.120
We want to render a component called results.

03:12:29.760 --> 03:12:30.399
Drop Down.

03:12:31.040 --> 03:12:35.600
A drop down that's going to contain the information about all the channels and users.

03:12:35.893 --> 03:12:39.625
Of course we'll have to pass a lot of information into this component.

03:12:39.972 --> 03:12:46.044
We have to pass things like team channels is equal to of course Steam channels.

03:12:46.478 --> 03:12:50.398
Then we have to do the same thing for direct channels.

03:12:51.760 --> 03:12:57.371
Also, we have to pass the loading property so that we know if we're loading.

03:12:57.680 --> 03:13:10.719
Also, the set channel property equal to set channel and also set query which is going to be equal to set query of course.

03:13:11.279 --> 03:13:18.318
And finally we'll also have to pass set toggle container is equal to set toggle container.

03:13:19.600 --> 03:13:27.009
Now let's see which one of these we don't have currently access to and these are going to be set channel.

03:13:27.439 --> 03:13:31.253
Set Channel is going to be a function that we can create right here.

03:13:31.600 --> 03:13:40.159
Const: Set channel is equal to a function that accepts a channel and in there we simply want to reset the query.

03:13:40.426 --> 03:13:52.238
So once we set the channel, we want to set the query to be equal to an empty string and then finally, we also want to set the active channel to be that specific channel.

03:13:53.520 --> 03:13:59.245
Now let's see where is the set toggle container coming from? That should be coming from Props.

03:13:59.542 --> 03:14:03.398
So let's see if we're passing that into our channel search.

03:14:04.478 --> 03:14:06.567
Let's check if we're passing that value through Props.

03:14:06.816 --> 03:14:16.719
So I'm going to go to the search, open the opening component bracket, and look for channel search, and it looks like we're not passing any data.

03:14:17.600 --> 03:14:19.040
so let's scroll up.

03:14:19.520 --> 03:14:26.413
We have the set toggle container here, and we're simply going to pass it through Props right inside of there.

03:14:26.959 --> 03:14:37.866
Now, if we go back to the channel search, we can get that variable right inside of here, but make sure to put it in curly braces so that it means that it's destructured from Props.

03:14:38.799 --> 03:14:44.398
Great! That means that now we have almost everything, if not everything for our new results.

03:14:44.999 --> 03:14:48.479
Drop down component before we go ahead and code it out.

03:14:48.719 --> 03:14:53.319
There's one more thing we have to add this file and that is going to be the use effect.

03:14:53.920 --> 03:14:56.959
We can create that use effect right here at the top.

03:14:57.359 --> 03:14:58.119
Use Effect.

03:14:58.879 --> 03:15:01.600
Make sure to add a dependency array in there.

03:15:01.911 --> 03:15:09.040
So just at the end we need a dependency array and we want to call the function every time that the query changes.

03:15:10.238 --> 03:15:19.173
So if the query changes, and if there is no query in that case, we need to clear the theme channels and direct channels.

03:15:19.600 --> 03:15:28.599
So what we can say is set theme channels to be equal to an empty array and also set direct channels to be an empty array as well.

03:15:29.359 --> 03:15:45.360
Great! Now we are ready to code out the Results Drop Down Component: Let's go ahead in the components folder, create a new file called Results Drop Down, Dot Jsx, and then in the index.

03:15:45.719 --> 03:15:48.359
We can simply use it right here.

03:15:48.879 --> 03:15:51.559
Results Drop Down.

03:15:52.559 --> 03:15:54.610
Now let's go to our results.

03:15:55.020 --> 03:15:55.430
Drop Down.

03:15:55.840 --> 03:16:00.285
The situation with our results: Drop Down is going to be incredibly similar to our channel inner.

03:16:00.571 --> 03:16:05.920
It's going to be a component with a lot of code, but not a lot of useful stuff that we can learn from.

03:16:06.195 --> 03:16:11.967
So in this case, it's going to be linked down in the description alongside all of the other files.

03:16:12.318 --> 03:16:18.274
Find the results, drop down, and simply copy and paste it here as you can see the result.

03:16:18.537 --> 03:16:27.239
Drop-down component accepts a lot of props, simply does the loading or no channels, and then finally it shows all of the search results.

03:16:28.079 --> 03:16:32.573
It has to show them both for the theme channels and also for direct channels.

03:16:33.120 --> 03:16:35.689
If we save the file, go back to our channel search.

03:16:36.019 --> 03:16:40.079
We need to scroll up and simply import results dropdown from the components.

03:16:41.359 --> 03:16:51.439
So right above our assets we can say import That's going to be Results Drop Down and that's going to be coming from components.

03:16:52.111 --> 03:16:58.079
So just dot slash Great! And finally, let's check it out in the browser.

03:16:58.479 --> 03:17:01.813
There we are! We have our conversation with Dr.

03:17:02.279 --> 03:17:03.680
James emergency and Cardiology.

03:17:04.009 --> 03:17:08.497
So if I go ahead and search for doctor, you can see that the Dr.

03:17:08.808 --> 03:17:16.478
James appears immediately and if you search for something like cardiology, you can see that appears as well and also emergency.

03:17:16.919 --> 03:17:21.793
So everything that you search for is going to appear here immediately.

03:17:22.238 --> 03:17:28.559
Right now, we don't have a lot of channels, but if we had more, all of them would be listed right here inside of the search.

03:17:28.899 --> 03:17:46.159
Great! We are done with the entire authentication search channels, messages, editing the channels, and creating channels, adding users reacting to messages, adding threats to messages, sending images, gifs, and anything you can think of.

03:17:46.548 --> 03:17:55.199
You can make this chat completely your own, but as you know on Javascript mastery, we always like to take it even one step further.

03:17:55.558 --> 03:18:08.760
We are going to connect Twilio notifications so that if a user is not online and he receives a message, the notification about a new message is going to be sent straight to his phone.

03:18:09.200 --> 03:18:15.428
So let's do that right away to send the Sms notifications to the people using our chat.

03:18:15.690 --> 03:18:18.207
We'll have to create an account with William.

03:18:18.639 --> 03:18:25.399
So to do that, head to Twilio.com link is going to be down in the description and make sure to click sign up.

03:18:25.760 --> 03:18:29.840
Once you do that, you can enter all of your information and I'll see you in the dashboard.

03:18:31.120 --> 03:18:33.554
Once you sign up, you'll have to verify your email.

03:18:33.830 --> 03:18:38.982
So let's go to our email and quickly verify it once you've verified your email.

03:18:39.268 --> 03:18:41.600
In this case, we'll also have to verify your phone.

03:18:42.398 --> 03:18:44.559
They accept all of the countries in the world.

03:18:44.870 --> 03:18:48.372
So yeah, let's go ahead and type in your phone number.

03:18:48.879 --> 03:18:52.079
Once you've verified your phone number as well, you can fill in this little questionnaire.

03:18:52.445 --> 03:18:58.318
So in here we're going to use Sms and we plan to build alerts and notifications.

03:18:59.760 --> 03:19:02.399
How do you want to build it? Well, of course with code.

03:19:02.959 --> 03:19:08.772
So what is your preferred coding language That's going to be Javascript And would you like to be able to host your code? No.

03:19:09.039 --> 03:19:11.702
In this case, we are going to host it ourselves.

03:19:12.057 --> 03:19:15.700
So let's get started with Vilio and there we go.

03:19:16.000 --> 03:19:21.839
At the start, you're given 15 bucks for free so that you can use for your email notifications.

03:19:22.398 --> 03:19:26.359
That means that you won't have to pay absolutely anything to test this out.

03:19:26.799 --> 03:19:27.139
In here.

03:19:27.479 --> 03:19:30.746
you have your account Sid and the odd token.

03:19:31.359 --> 03:19:33.293
So let's complete the steps below.

03:19:33.680 --> 03:19:36.253
First, you'll have to get a Twilio trial phone number.

03:19:36.666 --> 03:19:37.905
So let's click here.

03:19:38.318 --> 03:19:42.447
They gave us a random Us number so let's just click choose this number.

03:19:42.879 --> 03:19:50.533
There we go, we can click done and now that that is done, we have our account Sid and also the Auth token.

03:19:51.120 --> 03:19:56.799
So let's go to messaging and then finally try it out and get set up.

03:19:57.279 --> 03:19:57.511
in here.

03:19:57.743 --> 03:19:59.600
You can see get set up in five minutes.

03:20:00.066 --> 03:20:01.932
So let's click start setup.

03:20:02.398 --> 03:20:20.079
you have to enter your messaging service name i'm gonna say just medical pager and finally in here you can enter your phone number, choose your Sid, enter the text message and in here you can see the code example of how that message will be sent.

03:20:20.399 --> 03:20:26.741
We don't need to do that from their interface because we are going to take this code and do it straight from our express application.

03:20:27.164 --> 03:20:31.729
So let's go back to our app and let's code it right away.

03:20:32.079 --> 03:20:39.859
to implement our Sms messages, we'll have to go to server and then index.js inside of here.

03:20:40.109 --> 03:21:03.370
We'll have to import a few things so just below this require.env We can say const account Sid and we're going to get that from process Dot Env dot Twilio underscore Account Underscore Sid We don't want to simply paste it here because we need this data to be secure.

03:21:03.760 --> 03:21:06.000
Then we're also going to need the odd token.

03:21:06.529 --> 03:21:36.769
So we can say const odd token is equal to process Dot Env Dot Twilio underscore Auth underscore token And finally, we can set up our Twilio client by saying const Twilio client is equal to require Twilio and then we call it one more time pass in the account Sid and the Aud token.

03:21:37.239 --> 03:21:42.768
Great! This is our Twilio account which is going to allow us to make Twilio requests.

03:21:43.200 --> 03:21:49.146
So let's set up our process.env We have to add the Twilio account, Sid and the Twilio token.

03:21:49.653 --> 03:21:52.373
So back in here just a bit below.

03:21:52.604 --> 03:21:57.871
We can add these two variables and now we can copy the values from the web to do that.

03:21:58.087 --> 03:22:02.679
We can go back and you can copy the account Sid number straight from here.

03:22:03.439 --> 03:22:11.733
Let's paste it right there and then you can click show Auth token right here and then you can copy and paste the Auth token as well.

03:22:12.159 --> 03:22:14.079
So let's paste it here.

03:22:14.559 --> 03:22:17.189
Great With that, We are done with the initial setup.

03:22:17.499 --> 03:22:19.359
Now we can use this Twilio client.

03:22:20.799 --> 03:22:25.188
The way we're going to do this is we're going to set up one more route.

03:22:25.600 --> 03:22:27.909
We are going to do this using webhooks.

03:22:28.238 --> 03:22:34.672
Stream is going to trigger a specific endpoint on our server and then we're going to send a message.

03:22:35.120 --> 03:22:42.398
That endpoint is going to be app.post and then inside of here we can set up our route which is going to be simply slash.

03:22:43.600 --> 03:22:54.582
We also get the request and the response of course inside of a callback function rec and res and we have a function right here.

03:22:55.040 --> 03:22:58.453
Inside of that function we are going to receive some data from stream.

03:22:58.826 --> 03:23:05.451
More specifically, we can say const in curly braces we are going to type in message.

03:23:05.840 --> 03:23:08.479
Also, user colon is equal to sender.

03:23:08.919 --> 03:23:14.840
We're going to get the user who's sending the message and then also the type and finally members.

03:23:15.760 --> 03:23:18.999
We are getting all of this data from Rec dot body.

03:23:19.680 --> 03:23:23.200
That's the data that stream going to put into our endpoint.

03:23:24.000 --> 03:23:25.920
This part cannot be tested in the development mode.

03:23:26.239 --> 03:23:32.810
We have to code it out, deploy the project, and then we'll be able to test it out once it's deployed.

03:23:33.200 --> 03:23:34.488
So let's code it right now.

03:23:34.746 --> 03:23:35.520
it's not that complicated.

03:23:36.266 --> 03:23:37.013
I promise.

03:23:37.760 --> 03:23:50.520
We are going to add an If statement and say if type is equal to a string of message.new That means if the event is the creation of a new message.

03:23:51.040 --> 03:24:01.146
If that is the case, we want to loop over all of the members that belong to the chat the message was sent to, so we can say members dot for each.

03:24:02.000 --> 03:24:08.879
In there we have a callback function and for each member, we want to run the following block of code.

03:24:10.559 --> 03:24:19.266
We want to first extract the data from this member and we can do that by destructuring and then simply calling the user variable from that member.

03:24:19.760 --> 03:24:30.948
Then we can check if the user is online so we can say if not user.online we only want to send messages to the people who are not online.

03:24:31.245 --> 03:24:40.594
It wouldn't make sense that people are using our chat and we also send them messages to their phone and only if they're offline only, then are they going to get the message.

03:24:40.879 --> 03:24:46.360
So we can run Twilio Client dot Messages Dot Create.

03:24:47.120 --> 03:24:51.180
That's a function that takes in an object as options inside of there.

03:24:51.449 --> 03:24:53.459
we can specify the body of the message.

03:24:53.789 --> 03:25:18.179
So let's do a template string that's going to say you have a new message from Dollar Sign curly braces message dot, user dot, full name and then we can put a dash and simply say again dynamicblock message.txt So this is going to give them the message to their Sms.

03:25:18.799 --> 03:25:28.782
Then we have to add a comma and specify the messaging service Sid We can find this by going to Twilio's dashboard right here.

03:25:29.004 --> 03:25:35.159
You can see that we have a special medical pager service Id so we can simply copy and paste it.

03:25:35.520 --> 03:25:40.799
Let's copy it and instead of simply pasting it here, we're going to do the same thing we did before.

03:25:41.840 --> 03:25:43.376
That's going to be const.

03:25:43.760 --> 03:26:08.499
Messaging Service Sid is equal to dot Env Dot Twilio Underscore Messaging Underscore Service Sid So let's go to our Env and then inside of here, we want to paste that variable and set that equal to Twilio Messaging Service Sid.

03:26:09.359 --> 03:26:13.732
Great! Now we can use that variable right inside of here.

03:26:14.318 --> 03:26:16.769
and the last thing is the to property.

03:26:17.120 --> 03:26:22.238
Who do we want to send our message to and that is going to be user Dot phone Number.

03:26:22.585 --> 03:26:27.680
That's the reason why we're requesting the users to enter their phone numbers at the registration process.

03:26:29.439 --> 03:26:34.959
So once the message is sent, we have the dot then which is going to have a callback function.

03:26:35.760 --> 03:26:42.679
If the message has been sent successfully, we can simply console log message sent and we have a dot catch.

03:26:42.959 --> 03:26:46.719
If we have an error, we can simply console.log the error.

03:26:48.559 --> 03:26:50.425
This is going to be almost it.

03:26:50.737 --> 03:26:59.120
But think about it, we are also a member or a user and we don't want to send the message to ourselves when we send the message via stream.

03:26:59.519 --> 03:27:04.514
So just before the for each, I'm going to run the dot filter method.

03:27:04.879 --> 03:27:20.052
That filter accepts a callback function where we get a member and then we want to filter out ourselves so we can say if member dot, user underscore Id is not equal to sender dot Id.

03:27:20.879 --> 03:27:25.318
This is simply going to filter ourselves out and then we can send the message to everybody else.

03:27:26.238 --> 03:27:32.669
Finally, if everything goes right, we can do Res dot Status 200 and then dot send.

03:27:32.999 --> 03:27:43.979
We can simply say something like message sent and we can also return that and down below if it's not a new message if it's another kind of event.

03:27:44.239 --> 03:27:54.639
In that case, we can say return, rest that status 200 and we can say not a new message request.

03:27:55.013 --> 03:27:56.506
it was just something different.

03:27:56.879 --> 03:27:58.879
somebody else has read a message or gone online.

03:27:59.257 --> 03:28:06.746
Stream has events for all of these different types, but we are only tracking the new message request and this is it.

03:28:07.048 --> 03:28:15.266
This is the entire Twilio code that you need to put there to successfully send real messages from a real phone number to real people.

03:28:15.760 --> 03:28:17.315
They just make it so easy.

03:28:17.626 --> 03:28:26.879
With that said, let's take one last look into what we've built, see if there are any other issues and if there are none, we are ready to deploy this project.

03:28:27.600 --> 03:28:32.959
I went ahead and did some more testing messages, emojis, checked threads.

03:28:33.920 --> 03:28:35.188
Let's check them out.

03:28:35.611 --> 03:28:37.211
Hello threads work as well.

03:28:37.542 --> 03:28:40.639
You can reply to messages, sending images, check.

03:28:41.439 --> 03:28:44.318
We can also send Gifs and embed Youtube videos.

03:28:45.359 --> 03:28:47.519
Everything is working perfectly.

03:28:48.238 --> 03:28:51.839
With that said, we are finally ready to deploy this project.

03:28:52.478 --> 03:28:55.325
Let's first deploy the back end of her project to Heroku.

03:28:55.708 --> 03:29:02.373
You can head to Heroku.com and then log in or sign up if you don't have an account already.

03:29:02.799 --> 03:29:06.515
When you sign up, you'll be greeted with a page that looks like this in here.

03:29:06.817 --> 03:29:11.226
On the top right? you'll be able to click new to create a new app.

03:29:11.680 --> 03:29:16.959
I'm going to type medical dash pager and I'm going to choose my region as Europe.

03:29:18.159 --> 03:29:20.493
Finally, you can click create app.

03:29:20.959 --> 03:29:25.173
Once that part is done, you simply need to follow the instructions right here.

03:29:25.600 --> 03:29:28.605
First, you need to download and install the Heroku Cli.

03:29:29.108 --> 03:29:37.951
If you haven't already, you just need to click that link, scroll down and download and install it for your own operating system.

03:29:38.478 --> 03:29:54.186
Now that you have downloaded and installed the Heroku Cli, we can run the command Heroku Login back in our code, We can open up our terminal, and then I'm going to stop both servers from running by pressing Ctrl C and then Y.

03:29:54.799 --> 03:29:58.039
Now I'm going to delete one and clear the server.

03:29:58.719 --> 03:30:02.354
Okay, now we are on the medical pager forward slash Server.

03:30:02.651 --> 03:30:05.079
So make sure that you're on the server directory.

03:30:05.389 --> 03:30:11.173
We can Cd one time and now if we do Ls, you'll see that we have client and server.

03:30:11.520 --> 03:30:16.520
Make sure that you Cd into server because right now we are deploying the back end.

03:30:17.040 --> 03:30:23.639
So now let's run Heroku Login and then press enter.

03:30:24.238 --> 03:30:26.318
You will be prompted to log into Heroku Cli.

03:30:26.859 --> 03:30:31.225
So click login and then you can close that page and go back to the code.

03:30:31.474 --> 03:30:33.279
There we go, we are logged in.

03:30:33.840 --> 03:30:40.720
It might be a good idea to put the editor on the side so that we can view both the instructions and the terminal at the same time.

03:30:41.120 --> 03:30:46.559
There we go, We've just run Heroku Login and then we have to simply run Git Init.

03:30:46.879 --> 03:31:04.124
So right here, I'm going to run Git Init again, Make sure that you're in the server directory and then run Heroku, get remote and then a medical pager before you run git Add, make sure to go to your server and then right there, add, git, ignore.

03:31:04.488 --> 03:31:08.426
So right here, let's add a dot, git ignore file.

03:31:09.120 --> 03:31:11.954
Inside of here, you can simply type node underscore modules.

03:31:12.308 --> 03:31:18.849
This is going to make sure to ignore the node modules and they are not going to be pushed to Heroku.

03:31:19.200 --> 03:31:27.423
Now that we've done that, we can run, Git, Add, and finally git commit and they say make it better.

03:31:27.967 --> 03:31:29.056
We definitely will.

03:31:29.600 --> 03:31:33.639
Now that that is done, we can simply run Git, Push Heroku Master.

03:31:34.238 --> 03:31:39.180
It's going to take about half a minute and your project should be up and running on the web.

03:31:39.520 --> 03:31:40.199
There we go.

03:31:40.539 --> 03:31:59.327
The application is live, we can go back to our medical pager and simply click open app and if you see the hello World in little letters at the top left, that means that we reached our endpoint on our server and if this route works, all of the other ones are working as well.

03:31:59.760 --> 03:32:03.039
Great! Now we have this backend url.

03:32:03.439 --> 03:32:09.229
that's your entire backend url and we need to connect that to stream and also to our front end.

03:32:09.500 --> 03:32:13.022
So let's first go to our stream in here.

03:32:13.244 --> 03:32:15.799
we'll have to go to chat and then overview.

03:32:16.799 --> 03:32:22.519
We'll have to scroll down and we'll have to enter the url under the webhook url.

03:32:22.819 --> 03:32:26.239
This is going to allow us to send Sms messages.

03:32:26.719 --> 03:32:31.949
Great! Simply do it like this without the forward slash at the end and paste it.

03:32:32.318 --> 03:32:35.253
Finally, you have to click save.

03:32:35.840 --> 03:32:37.290
Let's open up our frontend code.

03:32:37.579 --> 03:32:45.279
We can go to the client source and that's going to be inside of the components and then auth inside of here.

03:32:45.483 --> 03:32:47.702
You can see that we have our own localhost 5000.

03:32:48.285 --> 03:32:54.426
so paste your new url right here and make sure to have the odd at the end.

03:32:54.799 --> 03:33:08.760
For me, that's going to be medical pager Heroku app.com forward slash auth that's the new server url we want to make the requests to Great! We are going to deploy the frontend part using Netlify.

03:33:09.680 --> 03:33:21.706
We can go to login or sign up and once you're in your account you'll be able to click sites and then here you'll be able to drag and drop your build folder.

03:33:22.159 --> 03:33:30.035
So how can we create a build? Well, let's open up our terminal and this time we'll have to be in the client side.

03:33:30.391 --> 03:33:37.907
So click Cd dot dot to get back to the root folder and then Cd client to get to our client side.

03:33:38.318 --> 03:33:41.920
Now that you're here, simply run Npm, Run Build.

03:33:43.439 --> 03:33:48.329
This is going to take about a minute and you should see a new build folder appear.

03:33:48.719 --> 03:33:49.271
There we go.

03:33:49.546 --> 03:33:53.880
If you can see this message, that means that the project has been built successfully.

03:33:54.719 --> 03:33:59.705
Now we can right click the build folder and click reveal in file Explorer.

03:34:00.318 --> 03:34:09.972
Once you do that, you can simply drag and drop your build folder right here and it's going to be built right away As you can see, it took seconds.

03:34:10.318 --> 03:34:15.399
We can go under domain settings and then options and edit the site name in.

03:34:15.780 --> 03:34:20.440
Here you can do something like medical pager, but of course you can do anything that you prefer.

03:34:21.040 --> 03:34:23.079
In this case, medical pager is taken.

03:34:23.420 --> 03:34:27.360
So I'm just going to type Jsm and there we go.

03:34:27.786 --> 03:34:29.493
Our website is now live.

03:34:29.920 --> 03:34:31.057
There is our great form.

03:34:31.341 --> 03:34:34.826
Let's try to log in as one of the users for example, Dr.

03:34:35.120 --> 03:34:41.828
Smith, I'm going to enter his username and password and click sign in and there we go.

03:34:42.251 --> 03:34:43.097
We are live.

03:34:43.520 --> 03:34:46.911
But this is so exciting because this is now Live on the web.

03:34:47.279 --> 03:34:53.653
That means that you can use this for your own purposes to create a group, chat with friends, colleagues, or anybody else.

03:34:54.159 --> 03:35:03.848
You can create entire communities of people that can chat inside of this chat, create channels, direct messages, send Gifs, and do all that other good stuff.

03:35:04.204 --> 03:35:07.839
Of course, all of this has been made possible by Stream.

03:35:08.639 --> 03:35:20.720
So huge thanks to Stream, not only for sponsoring this video, but also for creating such a phenomenal piece of software that allows you to create chat applications and feeds professionally and scalably.

03:35:21.600 --> 03:35:24.479
With that said, that's going to be the end of this video.

03:35:24.772 --> 03:35:26.238
This was quite a long one.

03:35:26.558 --> 03:35:30.959
So congratulations to you for coming to the end of this video and building this project out.

03:35:31.279 --> 03:35:33.360
I'm sure you've learned a lot.

03:35:34.159 --> 03:35:44.398
There are many more interesting projects coming up on the Js Mastery Pro platform, so if you're looking forward to that, definitely make sure to put your link into the mailing list to be sure to be notified.

03:35:45.760 --> 03:35:51.694
Once again, thank you so much for watching! Stay healthy and see you in the next one.

